import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

class WalmartSalesPredictor:
    """Demo class cho vi·ªác d·ª± ƒëo√°n doanh s·ªë Walmart"""
    
    def __init__(self, model_path="model_checkpoints/best_model.pkl", 
                 scaler_path="model_checkpoints/scaler.pkl"):
        """Kh·ªüi t·∫°o predictor v·ªõi model ƒë√£ train"""
        try:
            with open(model_path, 'rb') as f:
                self.model = pickle.load(f)
            with open(scaler_path, 'rb') as f:
                self.scaler = pickle.load(f)
            print("‚úÖ ƒê√£ load model th√†nh c√¥ng!")
        except FileNotFoundError:
            print("‚ùå Kh√¥ng t√¨m th·∫•y model. Vui l√≤ng train model tr∆∞·ªõc!")
            self.model = None
            self.scaler = None
    
    def prepare_input_data(self, store_data, lookback=10):
        """Chu·∫©n b·ªã d·ªØ li·ªáu input cho prediction"""
        feature_cols = ['Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment', 'WeekOfYear', 'Month']
        
        # L·∫•y 10 tu·∫ßn g·∫ßn nh·∫•t
        recent_data = store_data[feature_cols].tail(lookback).values.astype(np.float32)
        
        # Flatten th√†nh 1 vector
        input_features = recent_data.flatten().reshape(1, -1)
        
        return input_features
    
    def predict_next_week_sales(self, store_data):
        """D·ª± ƒëo√°n doanh s·ªë tu·∫ßn ti·∫øp theo"""
        if self.model is None:
            return None, "Model ch∆∞a ƒë∆∞·ª£c load"
        
        try:
            # Chu·∫©n b·ªã input
            X_input = self.prepare_input_data(store_data)
            
            # Chu·∫©n h√≥a
            X_scaled = self.scaler.transform(X_input)
            
            # D·ª± ƒëo√°n
            prediction = self.model.predict(X_scaled)[0]
            
            return prediction, "Th√†nh c√¥ng"
            
        except Exception as e:
            return None, f"L·ªói: {str(e)}"
    
    def demo_prediction(self):
        """Demo d·ª± ƒëo√°n v·ªõi d·ªØ li·ªáu m·∫´u"""
        print("\n" + "="*60)
        print("DEMO D·ª∞ ƒêO√ÅN DOANH S·ªê WALMART")
        print("="*60)
        
        # ƒê·ªçc d·ªØ li·ªáu
        df = pd.read_csv("walmart_processed_by_week.csv")
        
        # Demo cho 3 stores kh√°c nhau
        demo_stores = [1, 15, 30]
        
        for store_id in demo_stores:
            print(f"\n--- D·ª± ƒëo√°n cho Store {store_id} ---")
            
            # L·∫•y d·ªØ li·ªáu c·ªßa store
            store_data = df[df['Store'] == store_id].sort_values('Week_Index')
            
            if len(store_data) < 10:
                print(f"‚ùå Store {store_id} kh√¥ng ƒë·ªß d·ªØ li·ªáu (c·∫ßn √≠t nh·∫•t 10 tu·∫ßn)")
                continue
            
            # L·∫•y th√¥ng tin tu·∫ßn g·∫ßn nh·∫•t
            latest_week = store_data.iloc[-1]
            print(f"Tu·∫ßn g·∫ßn nh·∫•t: Week {latest_week['Week_Index']}")
            print(f"Doanh s·ªë tu·∫ßn g·∫ßn nh·∫•t: ${latest_week['Weekly_Sales']:,.2f}")
            
            # D·ª± ƒëo√°n tu·∫ßn ti·∫øp theo
            prediction, status = self.predict_next_week_sales(store_data)
            
            if prediction is not None:
                print(f"üîÆ D·ª± ƒëo√°n tu·∫ßn ti·∫øp theo: ${prediction:,.2f}")
                
                # T√≠nh % thay ƒë·ªïi
                change_percent = ((prediction - latest_week['Weekly_Sales']) / latest_week['Weekly_Sales']) * 100
                change_text = "tƒÉng" if change_percent > 0 else "gi·∫£m"
                print(f"üìà D·ª± ki·∫øn {change_text} {abs(change_percent):.1f}%")
                
                # Hi·ªÉn th·ªã th√¥ng tin th·ªùi ti·∫øt, kinh t·∫ø
                print(f"üå°Ô∏è Nhi·ªát ƒë·ªô: {latest_week['Temperature']:.1f}¬∞F")
                print(f"‚õΩ Gi√° xƒÉng: ${latest_week['Fuel_Price']:.2f}")
                print(f"üí∞ CPI: {latest_week['CPI']:.2f}")
                print(f"üë• T·ª∑ l·ªá th·∫•t nghi·ªáp: {latest_week['Unemployment']:.2f}%")
                
                # Ph√¢n t√≠ch y·∫øu t·ªë ·∫£nh h∆∞·ªüng
                self.analyze_factors(store_data)
                
            else:
                print(f"‚ùå {status}")
    
    def analyze_factors(self, store_data):
        """Ph√¢n t√≠ch c√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng"""
        print("\nüìä Ph√¢n t√≠ch y·∫øu t·ªë ·∫£nh h∆∞·ªüng:")
        
        # T√≠nh correlation v·ªõi Weekly_Sales
        numeric_cols = ['Weekly_Sales', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment']
        correlations = store_data[numeric_cols].corr()['Weekly_Sales'].sort_values(ascending=False)
        
        print("M·ªëi t∆∞∆°ng quan v·ªõi doanh s·ªë:")
        for col, corr in correlations.items():
            if col != 'Weekly_Sales':
                impact = "T√≠ch c·ª±c" if corr > 0 else "Ti√™u c·ª±c"
                strength = "M·∫°nh" if abs(corr) > 0.3 else "Y·∫øu" if abs(corr) < 0.1 else "Trung b√¨nh"
                print(f"  - {col}: {corr:.3f} ({impact}, {strength})")
        
        # Ph√¢n t√≠ch theo ng√†y l·ªÖ
        holiday_avg = store_data[store_data['Holiday_Flag'] == 1]['Weekly_Sales'].mean()
        normal_avg = store_data[store_data['Holiday_Flag'] == 0]['Weekly_Sales'].mean()
        
        if not pd.isna(holiday_avg) and not pd.isna(normal_avg):
            holiday_impact = ((holiday_avg - normal_avg) / normal_avg) * 100
            print(f"  - Ng√†y l·ªÖ: TƒÉng {holiday_impact:.1f}% so v·ªõi ng√†y th∆∞·ªùng")
    
    def batch_prediction_demo(self):
        """Demo d·ª± ƒëo√°n h√†ng lo·∫°t"""
        print("\n" + "="*60)
        print("DEMO D·ª∞ ƒêO√ÅN H√ÄNG LO·∫†T")
        print("="*60)
        
        df = pd.read_csv("walmart_processed_by_week.csv")
        
        # Ch·ªçn 5 stores ƒë·ªÉ demo
        demo_stores = df['Store'].unique()[:5]
        predictions = []
        
        for store_id in demo_stores:
            store_data = df[df['Store'] == store_id].sort_values('Week_Index')
            
            if len(store_data) >= 10:
                prediction, _ = self.predict_next_week_sales(store_data)
                if prediction is not None:
                    latest_sales = store_data.iloc[-1]['Weekly_Sales']
                    predictions.append({
                        'Store': store_id,
                        'Current_Sales': latest_sales,
                        'Predicted_Sales': prediction,
                        'Change_Percent': ((prediction - latest_sales) / latest_sales) * 100
                    })
        
        # T·∫°o b·∫£ng k·∫øt qu·∫£
        if predictions:
            results_df = pd.DataFrame(predictions)
            print("\nüìã K·∫øt qu·∫£ d·ª± ƒëo√°n cho 5 stores:")
            print(results_df.to_string(index=False, float_format='%.2f'))
            
            # V·∫Ω bi·ªÉu ƒë·ªì so s√°nh
            plt.figure(figsize=(12, 6))
            
            x = range(len(predictions))
            current_sales = [p['Current_Sales'] for p in predictions]
            predicted_sales = [p['Predicted_Sales'] for p in predictions]
            
            plt.subplot(1, 2, 1)
            plt.bar([i-0.2 for i in x], current_sales, width=0.4, label='Doanh s·ªë hi·ªán t·∫°i', color='skyblue')
            plt.bar([i+0.2 for i in x], predicted_sales, width=0.4, label='Doanh s·ªë d·ª± ƒëo√°n', color='orange')
            plt.xlabel('Store ID')
            plt.ylabel('Weekly Sales ($)')
            plt.title('So s√°nh doanh s·ªë hi·ªán t·∫°i vs d·ª± ƒëo√°n')
            plt.legend()
            plt.xticks(x, [p['Store'] for p in predictions])
            
            plt.subplot(1, 2, 2)
            changes = [p['Change_Percent'] for p in predictions]
            colors = ['green' if c > 0 else 'red' for c in changes]
            plt.bar(x, changes, color=colors)
            plt.xlabel('Store ID')
            plt.ylabel('Thay ƒë·ªïi (%)')
            plt.title('Ph·∫ßn trƒÉm thay ƒë·ªïi d·ª± ki·∫øn')
            plt.xticks(x, [p['Store'] for p in predictions])
            plt.axhline(y=0, color='black', linestyle='-', alpha=0.3)
            
            plt.tight_layout()
            plt.savefig('report_outputs/batch_prediction_demo.png', dpi=300, bbox_inches='tight')
            plt.show()
            
            print("\n‚úÖ ƒê√£ l∆∞u bi·ªÉu ƒë·ªì demo v√†o 'report_outputs/batch_prediction_demo.png'")
    
    def interactive_demo(self):
        """Demo t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng"""
        print("\n" + "="*60)
        print("DEMO T∆Ø∆†NG T√ÅC")
        print("="*60)
        
        df = pd.read_csv("walmart_processed_by_week.csv")
        
        while True:
            print("\nCh·ªçn ch·ª©c nƒÉng:")
            print("1. D·ª± ƒëo√°n cho store c·ª• th·ªÉ")
            print("2. D·ª± ƒëo√°n h√†ng lo·∫°t")
            print("3. Tho√°t")
            
            choice = input("\nNh·∫≠p l·ª±a ch·ªçn (1-3): ").strip()
            
            if choice == '1':
                try:
                    store_id = int(input("Nh·∫≠p Store ID (1-45): "))
                    if store_id < 1 or store_id > 45:
                        print("‚ùå Store ID ph·∫£i t·ª´ 1-45")
                        continue
                    
                    store_data = df[df['Store'] == store_id].sort_values('Week_Index')
                    
                    if len(store_data) < 10:
                        print(f"‚ùå Store {store_id} kh√¥ng ƒë·ªß d·ªØ li·ªáu")
                        continue
                    
                    prediction, status = self.predict_next_week_sales(store_data)
                    
                    if prediction is not None:
                        latest_sales = store_data.iloc[-1]['Weekly_Sales']
                        print(f"\nüîÆ D·ª± ƒëo√°n cho Store {store_id}:")
                        print(f"  - Doanh s·ªë hi·ªán t·∫°i: ${latest_sales:,.2f}")
                        print(f"  - Doanh s·ªë d·ª± ƒëo√°n: ${prediction:,.2f}")
                        
                        change_percent = ((prediction - latest_sales) / latest_sales) * 100
                        change_text = "tƒÉng" if change_percent > 0 else "gi·∫£m"
                        print(f"  - D·ª± ki·∫øn {change_text} {abs(change_percent):.1f}%")
                    
                except ValueError:
                    print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá")
                    
            elif choice == '2':
                self.batch_prediction_demo()
                
            elif choice == '3':
                print("üëã T·∫°m bi·ªát!")
                break
                
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")

def main():
    """H√†m main ƒë·ªÉ ch·∫°y demo"""
    predictor = WalmartSalesPredictor()
    
    if predictor.model is not None:
        # Ch·∫°y c√°c demo
        predictor.demo_prediction()
        predictor.batch_prediction_demo()
        predictor.interactive_demo()
    else:
        print("‚ùå Kh√¥ng th·ªÉ ch·∫°y demo v√¨ model ch∆∞a ƒë∆∞·ª£c load")

if __name__ == "__main__":
    main() 