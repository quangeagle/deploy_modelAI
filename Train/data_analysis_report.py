import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from xgboost import XGBRegressor
import pickle
import os

# T·∫°o th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£
os.makedirs('report_outputs', exist_ok=True)

# ƒê·ªçc d·ªØ li·ªáu
df = pd.read_csv("walmart_processed_by_week.csv")

print("="*60)
print("B√ÅO C√ÅO PH√ÇN T√çCH D·ªÆ LI·ªÜU WALMART SALES")
print("="*60)

# ========== 1. TH·ªêNG K√ä M√î T·∫¢ ==========
print("\n1. TH·ªêNG K√ä M√î T·∫¢ D·ªÆ LI·ªÜU")
print("-" * 40)
print("T·ªïng s·ªë b·∫£n ghi:", len(df))
print("S·ªë l∆∞·ª£ng c·ª≠a h√†ng:", df['Store'].nunique())
print("Th·ªùi gian d·ªØ li·ªáu:", df['Year'].min(), "-", df['Year'].max())
print("\nTh·ªëng k√™ Weekly Sales:")
print(df['Weekly_Sales'].describe())

# ========== 2. PH√ÇN T√çCH THEO C·ª¨A H√ÄNG ==========
print("\n2. PH√ÇN T√çCH THEO C·ª¨A H√ÄNG")
print("-" * 40)
store_stats = df.groupby('Store')['Weekly_Sales'].agg(['mean', 'std', 'min', 'max'])
print("Top 5 c·ª≠a h√†ng c√≥ doanh s·ªë cao nh·∫•t:")
print(store_stats.sort_values('mean', ascending=False).head())

# ========== 3. PH√ÇN T√çCH THEO TH·ªúI GIAN ==========
print("\n3. PH√ÇN T√çCH THEO TH·ªúI GIAN")
print("-" * 40)
monthly_stats = df.groupby('Month')['Weekly_Sales'].mean()
print("Doanh s·ªë trung b√¨nh theo th√°ng:")
for month, sales in monthly_stats.items():
    print(f"Th√°ng {month}: ${sales:,.0f}")

# ========== 4. PH√ÇN T√çCH NG√ÄY L·ªÑ ==========
print("\n4. PH√ÇN T√çCH NG√ÄY L·ªÑ")
print("-" * 40)
holiday_stats = df.groupby('Holiday_Flag')['Weekly_Sales'].mean()
print(f"Doanh s·ªë ng√†y th∆∞·ªùng: ${holiday_stats[0]:,.0f}")
print(f"Doanh s·ªë ng√†y l·ªÖ: ${holiday_stats[1]:,.0f}")
print(f"TƒÉng tr∆∞·ªüng: {((holiday_stats[1]/holiday_stats[0])-1)*100:.1f}%")

# ========== 5. V·∫º BI·ªÇU ƒê·ªí PH√ÇN T√çCH ==========
print("\n5. T·∫†O BI·ªÇU ƒê·ªí PH√ÇN T√çCH")
print("-" * 40)

# Bi·ªÉu ƒë·ªì 1: Ph√¢n ph·ªëi doanh s·ªë
plt.figure(figsize=(15, 10))

plt.subplot(2, 3, 1)
plt.hist(df['Weekly_Sales'], bins=50, alpha=0.7, color='skyblue', edgecolor='black')
plt.title('Ph√¢n ph·ªëi Weekly Sales')
plt.xlabel('Weekly Sales ($)')
plt.ylabel('T·∫ßn su·∫•t')

# Bi·ªÉu ƒë·ªì 2: Doanh s·ªë theo store
plt.subplot(2, 3, 2)
store_sales = df.groupby('Store')['Weekly_Sales'].mean().sort_values(ascending=False)
plt.bar(range(len(store_sales)), store_sales.values, color='lightcoral')
plt.title('Doanh s·ªë trung b√¨nh theo Store')
plt.xlabel('Store ID')
plt.ylabel('Weekly Sales ($)')
plt.xticks(range(0, len(store_sales), 5))

# Bi·ªÉu ƒë·ªì 3: Xu h∆∞·ªõng theo th·ªùi gian
plt.subplot(2, 3, 3)
time_sales = df.groupby('Week_Index')['Weekly_Sales'].mean()
plt.plot(time_sales.index, time_sales.values, color='green', linewidth=2)
plt.title('Xu h∆∞·ªõng Weekly Sales theo th·ªùi gian')
plt.xlabel('Week Index')
plt.ylabel('Weekly Sales ($)')

# Bi·ªÉu ƒë·ªì 4: Doanh s·ªë theo th√°ng
plt.subplot(2, 3, 4)
month_sales = df.groupby('Month')['Weekly_Sales'].mean()
plt.bar(month_sales.index, month_sales.values, color='gold')
plt.title('Doanh s·ªë trung b√¨nh theo th√°ng')
plt.xlabel('Th√°ng')
plt.ylabel('Weekly Sales ($)')

# Bi·ªÉu ƒë·ªì 5: So s√°nh ng√†y l·ªÖ
plt.subplot(2, 3, 5)
holiday_sales = df.groupby('Holiday_Flag')['Weekly_Sales'].mean()
plt.bar(['Ng√†y th∆∞·ªùng', 'Ng√†y l·ªÖ'], holiday_sales.values, color=['lightblue', 'orange'])
plt.title('Doanh s·ªë theo ng√†y l·ªÖ')
plt.ylabel('Weekly Sales ($)')

# Bi·ªÉu ƒë·ªì 6: Correlation matrix
plt.subplot(2, 3, 6)
numeric_cols = ['Weekly_Sales', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment']
correlation_matrix = df[numeric_cols].corr()
plt.imshow(correlation_matrix, cmap='coolwarm', aspect='auto')
plt.colorbar()
plt.xticks(range(len(numeric_cols)), numeric_cols, rotation=45)
plt.yticks(range(len(numeric_cols)), numeric_cols)
plt.title('Ma tr·∫≠n t∆∞∆°ng quan')

# Th√™m gi√° tr·ªã correlation
for i in range(len(numeric_cols)):
    for j in range(len(numeric_cols)):
        plt.text(j, i, f'{correlation_matrix.iloc[i, j]:.2f}', 
                ha='center', va='center', color='black', fontweight='bold')

plt.tight_layout()
plt.savefig('report_outputs/data_analysis_overview.png', dpi=300, bbox_inches='tight')
plt.show()

print("‚úÖ ƒê√£ l∆∞u bi·ªÉu ƒë·ªì t·ªïng quan v√†o 'report_outputs/data_analysis_overview.png'")

# ========== 6. PH√ÇN T√çCH CHI TI·∫æT ==========
print("\n6. PH√ÇN T√çCH CHI TI·∫æT")
print("-" * 40)

# Ph√¢n t√≠ch outliers b·∫±ng IQR method
print("\nüìä PH√ÇN T√çCH OUTLIERS B·∫∞NG IQR METHOD:")
print("-" * 50)

# T√≠nh Q1, Q3 v√† IQR
Q1 = df['Weekly_Sales'].quantile(0.25)
Q3 = df['Weekly_Sales'].quantile(0.75)
IQR = Q3 - Q1

# X√°c ƒë·ªãnh outliers (gi√° tr·ªã n·∫±m ngo√†i Q1 - 1.5*IQR v√† Q3 + 1.5*IQR)
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
outliers = df[(df['Weekly_Sales'] < lower_bound) | (df['Weekly_Sales'] > upper_bound)]

print(f"Q1 (25th percentile): ${Q1:,.2f}")
print(f"Q3 (75th percentile): ${Q3:,.2f}")
print(f"IQR: ${IQR:,.2f}")
print(f"Lower bound: ${lower_bound:,.2f}")
print(f"Upper bound: ${upper_bound:,.2f}")
print(f"S·ªë l∆∞·ª£ng outliers: {len(outliers)} ({len(outliers)/len(df)*100:.1f}%)")

# Ph√¢n t√≠ch chi ti·∫øt outliers
if len(outliers) > 0:
    print(f"\nüìà Th·ªëng k√™ outliers:")
    print(f"  - Outliers th·∫•p nh·∫•t: ${outliers['Weekly_Sales'].min():,.2f}")
    print(f"  - Outliers cao nh·∫•t: ${outliers['Weekly_Sales'].max():,.2f}")
    print(f"  - Outliers trung b√¨nh: ${outliers['Weekly_Sales'].mean():,.2f}")
    
    # Ph√¢n t√≠ch outliers theo store
    outlier_stores = outliers['Store'].value_counts()
    print(f"\nüè™ Top 5 stores c√≥ nhi·ªÅu outliers nh·∫•t:")
    for store, count in outlier_stores.head().items():
        print(f"  - Store {store}: {count} outliers")
    
    # Ph√¢n t√≠ch outliers theo th·ªùi gian
    outlier_months = outliers['Month'].value_counts()
    print(f"\nüìÖ Th√°ng c√≥ nhi·ªÅu outliers nh·∫•t:")
    for month, count in outlier_months.head().items():
        print(f"  - Th√°ng {month}: {count} outliers")

# V·∫Ω bi·ªÉu ƒë·ªì boxplot ƒë·ªÉ visualize outliers
plt.figure(figsize=(12, 8))

plt.subplot(2, 2, 1)
plt.boxplot(df['Weekly_Sales'])
plt.title('Boxplot Weekly Sales (T·∫•t c·∫£ d·ªØ li·ªáu)')
plt.ylabel('Weekly Sales ($)')

plt.subplot(2, 2, 2)
plt.hist(df['Weekly_Sales'], bins=50, alpha=0.7, color='skyblue', edgecolor='black')
plt.axvline(lower_bound, color='red', linestyle='--', label=f'Lower bound: ${lower_bound:,.0f}')
plt.axvline(upper_bound, color='red', linestyle='--', label=f'Upper bound: ${upper_bound:,.0f}')
plt.title('Ph√¢n ph·ªëi Weekly Sales v·ªõi Outlier Bounds')
plt.xlabel('Weekly Sales ($)')
plt.ylabel('T·∫ßn su·∫•t')
plt.legend()

plt.subplot(2, 2, 3)
if len(outliers) > 0:
    plt.scatter(outliers['Store'], outliers['Weekly_Sales'], color='red', alpha=0.6, s=20)
    plt.title('Outliers theo Store')
    plt.xlabel('Store ID')
    plt.ylabel('Weekly Sales ($)')

plt.subplot(2, 2, 4)
if len(outliers) > 0:
    plt.scatter(outliers['Month'], outliers['Weekly_Sales'], color='orange', alpha=0.6, s=20)
    plt.title('Outliers theo Th√°ng')
    plt.xlabel('Th√°ng')
    plt.ylabel('Weekly Sales ($)')

plt.tight_layout()
plt.savefig('report_outputs/outlier_analysis.png', dpi=300, bbox_inches='tight')
plt.show()

print(f"\n‚úÖ ƒê√£ l∆∞u bi·ªÉu ƒë·ªì ph√¢n t√≠ch outliers v√†o 'report_outputs/outlier_analysis.png'")

# Ph√¢n t√≠ch correlation
print("\nCorrelation v·ªõi Weekly_Sales:")
correlations = df[numeric_cols].corr()['Weekly_Sales'].sort_values(ascending=False)
for col, corr in correlations.items():
    if col != 'Weekly_Sales':
        print(f"{col}: {corr:.3f}")

# Ph√¢n t√≠ch theo nƒÉm
yearly_stats = df.groupby('Year')['Weekly_Sales'].mean()
print(f"\nDoanh s·ªë trung b√¨nh theo nƒÉm:")
for year, sales in yearly_stats.items():
    print(f"NƒÉm {year}: ${sales:,.0f}")

print("\n" + "="*60)
print("HO√ÄN TH√ÄNH PH√ÇN T√çCH D·ªÆ LI·ªÜU")
print("="*60) 