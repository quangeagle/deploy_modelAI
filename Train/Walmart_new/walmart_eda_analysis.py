# Walmart EDA Analysis - Exploratory Data Analysis
# Ph√¢n t√≠ch th·ªëng k√™ & h√¨nh ·∫£nh tr∆∞·ªõc khi train m√¥ h√¨nh

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

# C√†i ƒë·∫∑t style cho bi·ªÉu ƒë·ªì
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

# ƒê·ªçc d·ªØ li·ªáu
print("üìä ƒêang ƒë·ªçc d·ªØ li·ªáu Walmart...")
df = pd.read_csv("E:\TrainAI\Train\walmart_processed_by_week.csv")

# Chuy·ªÉn ƒë·ªïi Date th√†nh datetime
df['Date'] = pd.to_datetime(df['Date'])

print("="*60)
print("üîç PH√ÇN T√çCH TH·ªêNG K√ä & H√åNH ·∫¢NH WALMART")
print("="*60)

# ========== 1. T·ªîNG QUAN D·ªÆ LI·ªÜU ==========
print("\n1. T·ªîNG QUAN D·ªÆ LI·ªÜU")
print("-" * 40)

print(f"üìà T·ªïng s·ªë b·∫£n ghi: {len(df):,}")
print(f"üè™ S·ªë l∆∞·ª£ng c·ª≠a h√†ng: {df['Store'].nunique()}")
print(f"üìÖ Th·ªùi gian: {df['Date'].min().strftime('%Y-%m-%d')} ƒë·∫øn {df['Date'].max().strftime('%Y-%m-%d')}")
print(f"üí∞ Doanh thu trung b√¨nh: ${df['Weekly_Sales'].mean():,.2f}")
print(f"üí∞ Doanh thu t·ªëi ƒëa: ${df['Weekly_Sales'].max():,.2f}")
print(f"üí∞ Doanh thu t·ªëi thi·ªÉu: ${df['Weekly_Sales'].min():,.2f}")

# Th·ªëng k√™ m√¥ t·∫£
print("\nüìä Th·ªëng k√™ m√¥ t·∫£:")
print(df.describe())

# ========== 2. PH√ÇN T√çCH DOANH THU THEO TEMPERATURE ==========
print("\n2. PH√ÇN T√çCH DOANH THU THEO NHI·ªÜT ƒê·ªò")
print("-" * 40)

# T·∫°o figure cho Temperature analysis
fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('üî• PH√ÇN T√çCH DOANH THU THEO NHI·ªÜT ƒê·ªò', fontsize=16, fontweight='bold')

# 2.1 Scatter plot: Temperature vs Weekly_Sales
axes[0, 0].scatter(df['Temperature'], df['Weekly_Sales'], alpha=0.6, s=20)
axes[0, 0].set_xlabel('Nhi·ªát ƒë·ªô (¬∞F)')
axes[0, 0].set_ylabel('Doanh thu tu·∫ßn ($)')
axes[0, 0].set_title('Nhi·ªát ƒë·ªô vs Doanh thu')
axes[0, 0].grid(True, alpha=0.3)

# Th√™m trend line
z = np.polyfit(df['Temperature'], df['Weekly_Sales'], 1)
p = np.poly1d(z)
axes[0, 0].plot(df['Temperature'], p(df['Temperature']), "r--", alpha=0.8)

# 2.2 Boxplot: Doanh thu theo nh√≥m nhi·ªát ƒë·ªô
df['Temp_Category'] = pd.cut(df['Temperature'], 
                             bins=[0, 40, 60, 80, 100], 
                             labels=['L·∫°nh (<40¬∞F)', 'M√°t (40-60¬∞F)', '·∫§m (60-80¬∞F)', 'N√≥ng (>80¬∞F)'])

sns.boxplot(data=df, x='Temp_Category', y='Weekly_Sales', ax=axes[0, 1])
axes[0, 1].set_title('Doanh thu theo nh√≥m nhi·ªát ƒë·ªô')
axes[0, 1].tick_params(axis='x', rotation=45)

# 2.3 Line plot: Nhi·ªát ƒë·ªô v√† doanh thu theo th·ªùi gian
sample_store = df[df['Store'] == 1].sort_values('Date')
axes[1, 0].plot(sample_store['Date'], sample_store['Temperature'], 'b-', label='Nhi·ªát ƒë·ªô', alpha=0.7)
axes[1, 0].set_xlabel('Th·ªùi gian')
axes[1, 0].set_ylabel('Nhi·ªát ƒë·ªô (¬∞F)', color='b')
axes[1, 0].tick_params(axis='y', labelcolor='b')

ax2 = axes[1, 0].twinx()
ax2.plot(sample_store['Date'], sample_store['Weekly_Sales'], 'r-', label='Doanh thu', alpha=0.7)
ax2.set_ylabel('Doanh thu ($)', color='r')
ax2.tick_params(axis='y', labelcolor='r')
axes[1, 0].set_title('Nhi·ªát ƒë·ªô v√† Doanh thu theo th·ªùi gian (Store 1)')

# 2.4 Correlation heatmap cho Temperature
temp_corr = df[['Temperature', 'Weekly_Sales']].corr()
sns.heatmap(temp_corr, annot=True, cmap='coolwarm', center=0, ax=axes[1, 1])
axes[1, 1].set_title('Correlation: Nhi·ªát ƒë·ªô vs Doanh thu')

plt.tight_layout()
plt.savefig('temperature_analysis.png', dpi=300, bbox_inches='tight')
plt.show()

# Th·ªëng k√™ correlation
temp_correlation = df['Temperature'].corr(df['Weekly_Sales'])
print(f"üìä Correlation Temperature vs Sales: {temp_correlation:.4f}")

# ========== 3. PH√ÇN T√çCH DOANH THU THEO FUEL_PRICE ==========
print("\n3. PH√ÇN T√çCH DOANH THU THEO GI√Å NHI√äN LI·ªÜU")
print("-" * 40)

fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('‚õΩ PH√ÇN T√çCH DOANH THU THEO GI√Å NHI√äN LI·ªÜU', fontsize=16, fontweight='bold')

# 3.1 Scatter plot: Fuel_Price vs Weekly_Sales
axes[0, 0].scatter(df['Fuel_Price'], df['Weekly_Sales'], alpha=0.6, s=20)
axes[0, 0].set_xlabel('Gi√° nhi√™n li·ªáu ($)')
axes[0, 0].set_ylabel('Doanh thu tu·∫ßn ($)')
axes[0, 0].set_title('Gi√° nhi√™n li·ªáu vs Doanh thu')
axes[0, 0].grid(True, alpha=0.3)

# Th√™m trend line
z = np.polyfit(df['Fuel_Price'], df['Weekly_Sales'], 1)
p = np.poly1d(z)
axes[0, 0].plot(df['Fuel_Price'], p(df['Fuel_Price']), "r--", alpha=0.8)

# 3.2 Line plot: Fuel price v√† doanh thu theo th·ªùi gian
sample_store = df[df['Store'] == 1].sort_values('Date')
axes[0, 1].plot(sample_store['Date'], sample_store['Fuel_Price'], 'g-', label='Gi√° nhi√™n li·ªáu', alpha=0.7)
axes[0, 1].set_xlabel('Th·ªùi gian')
axes[0, 1].set_ylabel('Gi√° nhi√™n li·ªáu ($)', color='g')
axes[0, 1].tick_params(axis='y', labelcolor='g')

ax2 = axes[0, 1].twinx()
ax2.plot(sample_store['Date'], sample_store['Weekly_Sales'], 'r-', label='Doanh thu', alpha=0.7)
ax2.set_ylabel('Doanh thu ($)', color='r')
ax2.tick_params(axis='y', labelcolor='r')
axes[0, 1].set_title('Gi√° nhi√™n li·ªáu v√† Doanh thu theo th·ªùi gian')

# 3.3 Boxplot: Doanh thu theo nh√≥m gi√° nhi√™n li·ªáu
df['Fuel_Category'] = pd.cut(df['Fuel_Price'], 
                             bins=[0, 2.5, 3.0, 3.5, 4.0], 
                             labels=['Th·∫•p (<$2.5)', 'Trung b√¨nh ($2.5-3.0)', 'Cao ($3.0-3.5)', 'R·∫•t cao (>$3.5)'])

sns.boxplot(data=df, x='Fuel_Category', y='Weekly_Sales', ax=axes[1, 0])
axes[1, 0].set_title('Doanh thu theo nh√≥m gi√° nhi√™n li·ªáu')
axes[1, 0].tick_params(axis='x', rotation=45)

# 3.4 Correlation heatmap cho Fuel_Price
fuel_corr = df[['Fuel_Price', 'Weekly_Sales']].corr()
sns.heatmap(fuel_corr, annot=True, cmap='coolwarm', center=0, ax=axes[1, 1])
axes[1, 1].set_title('Correlation: Gi√° nhi√™n li·ªáu vs Doanh thu')

plt.tight_layout()
plt.savefig('fuel_price_analysis.png', dpi=300, bbox_inches='tight')
plt.show()

# Th·ªëng k√™ correlation
fuel_correlation = df['Fuel_Price'].corr(df['Weekly_Sales'])
print(f"üìä Correlation Fuel Price vs Sales: {fuel_correlation:.4f}")

# ========== 4. PH√ÇN T√çCH DOANH THU THEO HOLIDAY_FLAG ==========
print("\n4. PH√ÇN T√çCH DOANH THU THEO NG√ÄY L·ªÑ")
print("-" * 40)

fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('üéâ PH√ÇN T√çCH DOANH THU THEO NG√ÄY L·ªÑ', fontsize=16, fontweight='bold')

# 4.1 Boxplot: Doanh thu khi c√≥ l·ªÖ vs kh√¥ng l·ªÖ
sns.boxplot(data=df, x='Holiday_Flag', y='Weekly_Sales', ax=axes[0, 0])
axes[0, 0].set_xlabel('C√≥ l·ªÖ (1) / Kh√¥ng l·ªÖ (0)')
axes[0, 0].set_ylabel('Doanh thu tu·∫ßn ($)')
axes[0, 0].set_title('Doanh thu: L·ªÖ vs Kh√¥ng l·ªÖ')

# 4.2 Bar plot: Doanh thu trung b√¨nh
holiday_stats = df.groupby('Holiday_Flag')['Weekly_Sales'].agg(['mean', 'std', 'count']).reset_index()
holiday_stats.columns = ['Holiday_Flag', 'Mean_Sales', 'Std_Sales', 'Count']

axes[0, 1].bar(holiday_stats['Holiday_Flag'], holiday_stats['Mean_Sales'], 
                yerr=holiday_stats['Std_Sales'], capsize=5, alpha=0.7)
axes[0, 1].set_xlabel('C√≥ l·ªÖ (1) / Kh√¥ng l·ªÖ (0)')
axes[0, 1].set_ylabel('Doanh thu trung b√¨nh ($)')
axes[0, 1].set_title('Doanh thu trung b√¨nh theo ng√†y l·ªÖ')
axes[0, 1].set_xticks([0, 1])
axes[0, 1].set_xticklabels(['Kh√¥ng l·ªÖ', 'C√≥ l·ªÖ'])

# 4.3 Violin plot: Ph√¢n ph·ªëi doanh thu
sns.violinplot(data=df, x='Holiday_Flag', y='Weekly_Sales', ax=axes[1, 0])
axes[1, 0].set_xlabel('C√≥ l·ªÖ (1) / Kh√¥ng l·ªÖ (0)')
axes[1, 0].set_ylabel('Doanh thu tu·∫ßn ($)')
axes[1, 0].set_title('Ph√¢n ph·ªëi doanh thu theo ng√†y l·ªÖ')

# 4.4 Line plot: Doanh thu theo th·ªùi gian v·ªõi highlight ng√†y l·ªÖ
sample_store = df[df['Store'] == 1].sort_values('Date')
axes[1, 1].plot(sample_store['Date'], sample_store['Weekly_Sales'], 'b-', alpha=0.7, label='Doanh thu')

# Highlight ng√†y l·ªÖ
holiday_dates = sample_store[sample_store['Holiday_Flag'] == 1]
axes[1, 1].scatter(holiday_dates['Date'], holiday_dates['Weekly_Sales'], 
                   color='red', s=50, alpha=0.8, label='Ng√†y l·ªÖ')

axes[1, 1].set_xlabel('Th·ªùi gian')
axes[1, 1].set_ylabel('Doanh thu ($)')
axes[1, 1].set_title('Doanh thu theo th·ªùi gian (ƒë·ªè = ng√†y l·ªÖ)')
axes[1, 1].legend()

plt.tight_layout()
plt.savefig('holiday_analysis.png', dpi=300, bbox_inches='tight')
plt.show()

# Th·ªëng k√™ holiday
holiday_sales = df[df['Holiday_Flag'] == 1]['Weekly_Sales']
non_holiday_sales = df[df['Holiday_Flag'] == 0]['Weekly_Sales']

print(f"üìä Doanh thu trung b√¨nh ng√†y l·ªÖ: ${holiday_sales.mean():,.2f}")
print(f"üìä Doanh thu trung b√¨nh kh√¥ng l·ªÖ: ${non_holiday_sales.mean():,.2f}")
print(f"üìä TƒÉng tr∆∞·ªüng ng√†y l·ªÖ: {((holiday_sales.mean() - non_holiday_sales.mean()) / non_holiday_sales.mean() * 100):.2f}%")

# ========== 5. PH√ÇN T√çCH DOANH THU THEO CPI ==========
print("\n5. PH√ÇN T√çCH DOANH THU THEO CPI")
print("-" * 40)

fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('üí∞ PH√ÇN T√çCH DOANH THU THEO CPI', fontsize=16, fontweight='bold')

# 5.1 Scatter plot: CPI vs Weekly_Sales
axes[0, 0].scatter(df['CPI'], df['Weekly_Sales'], alpha=0.6, s=20)
axes[0, 0].set_xlabel('CPI (Consumer Price Index)')
axes[0, 0].set_ylabel('Doanh thu tu·∫ßn ($)')
axes[0, 0].set_title('CPI vs Doanh thu')
axes[0, 0].grid(True, alpha=0.3)

# Th√™m trend line
z = np.polyfit(df['CPI'], df['Weekly_Sales'], 1)
p = np.poly1d(z)
axes[0, 0].plot(df['CPI'], p(df['CPI']), "r--", alpha=0.8)

# 5.2 Line plot: CPI v√† doanh thu theo th·ªùi gian
sample_store = df[df['Store'] == 1].sort_values('Date')
axes[0, 1].plot(sample_store['Date'], sample_store['CPI'], 'purple', alpha=0.7, label='CPI')
axes[0, 1].set_xlabel('Th·ªùi gian')
axes[0, 1].set_ylabel('CPI', color='purple')
axes[0, 1].tick_params(axis='y', labelcolor='purple')

ax2 = axes[0, 1].twinx()
ax2.plot(sample_store['Date'], sample_store['Weekly_Sales'], 'r-', alpha=0.7, label='Doanh thu')
ax2.set_ylabel('Doanh thu ($)', color='r')
ax2.tick_params(axis='y', labelcolor='r')
axes[0, 1].set_title('CPI v√† Doanh thu theo th·ªùi gian')

# 5.3 Boxplot: Doanh thu theo nh√≥m CPI
df['CPI_Category'] = pd.cut(df['CPI'], 
                            bins=[200, 210, 215, 220, 230], 
                            labels=['Th·∫•p (200-210)', 'Trung b√¨nh (210-215)', 'Cao (215-220)', 'R·∫•t cao (220-230)'])

sns.boxplot(data=df, x='CPI_Category', y='Weekly_Sales', ax=axes[1, 0])
axes[1, 0].set_title('Doanh thu theo nh√≥m CPI')
axes[1, 0].tick_params(axis='x', rotation=45)

# 5.4 Correlation heatmap cho CPI
cpi_corr = df[['CPI', 'Weekly_Sales']].corr()
sns.heatmap(cpi_corr, annot=True, cmap='coolwarm', center=0, ax=axes[1, 1])
axes[1, 1].set_title('Correlation: CPI vs Doanh thu')

plt.tight_layout()
plt.savefig('cpi_analysis.png', dpi=300, bbox_inches='tight')
plt.show()

# Th·ªëng k√™ correlation
cpi_correlation = df['CPI'].corr(df['Weekly_Sales'])
print(f"üìä Correlation CPI vs Sales: {cpi_correlation:.4f}")

# ========== 6. PH√ÇN T√çCH DOANH THU THEO UNEMPLOYMENT ==========
print("\n6. PH√ÇN T√çCH DOANH THU THEO T·ª∂ L·ªÜ TH·∫§T NGHI·ªÜP")
print("-" * 40)

fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('üë• PH√ÇN T√çCH DOANH THU THEO T·ª∂ L·ªÜ TH·∫§T NGHI·ªÜP', fontsize=16, fontweight='bold')

# 6.1 Scatter plot: Unemployment vs Weekly_Sales
axes[0, 0].scatter(df['Unemployment'], df['Weekly_Sales'], alpha=0.6, s=20)
axes[0, 0].set_xlabel('T·ª∑ l·ªá th·∫•t nghi·ªáp (%)')
axes[0, 0].set_ylabel('Doanh thu tu·∫ßn ($)')
axes[0, 0].set_title('T·ª∑ l·ªá th·∫•t nghi·ªáp vs Doanh thu')
axes[0, 0].grid(True, alpha=0.3)

# Th√™m trend line
z = np.polyfit(df['Unemployment'], df['Weekly_Sales'], 1)
p = np.poly1d(z)
axes[0, 0].plot(df['Unemployment'], p(df['Unemployment']), "r--", alpha=0.8)

# 6.2 Line plot: Unemployment v√† doanh thu theo th·ªùi gian
sample_store = df[df['Store'] == 1].sort_values('Date')
axes[0, 1].plot(sample_store['Date'], sample_store['Unemployment'], 'orange', alpha=0.7, label='T·ª∑ l·ªá th·∫•t nghi·ªáp')
axes[0, 1].set_xlabel('Th·ªùi gian')
axes[0, 1].set_ylabel('T·ª∑ l·ªá th·∫•t nghi·ªáp (%)', color='orange')
axes[0, 1].tick_params(axis='y', labelcolor='orange')

ax2 = axes[0, 1].twinx()
ax2.plot(sample_store['Date'], sample_store['Weekly_Sales'], 'r-', alpha=0.7, label='Doanh thu')
ax2.set_ylabel('Doanh thu ($)', color='r')
ax2.tick_params(axis='y', labelcolor='r')
axes[0, 1].set_title('T·ª∑ l·ªá th·∫•t nghi·ªáp v√† Doanh thu theo th·ªùi gian')

# 6.3 Boxplot: Doanh thu theo nh√≥m th·∫•t nghi·ªáp
df['Unemployment_Category'] = pd.cut(df['Unemployment'], 
                                     bins=[0, 6, 8, 10, 15], 
                                     labels=['Th·∫•p (<6%)', 'Trung b√¨nh (6-8%)', 'Cao (8-10%)', 'R·∫•t cao (>10%)'])

sns.boxplot(data=df, x='Unemployment_Category', y='Weekly_Sales', ax=axes[1, 0])
axes[1, 0].set_title('Doanh thu theo nh√≥m t·ª∑ l·ªá th·∫•t nghi·ªáp')
axes[1, 0].tick_params(axis='x', rotation=45)

# 6.4 Correlation heatmap cho Unemployment
unemp_corr = df[['Unemployment', 'Weekly_Sales']].corr()
sns.heatmap(unemp_corr, annot=True, cmap='coolwarm', center=0, ax=axes[1, 1])
axes[1, 1].set_title('Correlation: T·ª∑ l·ªá th·∫•t nghi·ªáp vs Doanh thu')

plt.tight_layout()
plt.savefig('unemployment_analysis.png', dpi=300, bbox_inches='tight')
plt.show()

# Th·ªëng k√™ correlation
unemp_correlation = df['Unemployment'].corr(df['Weekly_Sales'])
print(f"üìä Correlation Unemployment vs Sales: {unemp_correlation:.4f}")

# ========== 7. T·ªîNG H·ª¢P CORRELATION MATRIX ==========
print("\n7. T·ªîNG H·ª¢P CORRELATION MATRIX")
print("-" * 40)

# T·∫°o correlation matrix cho t·∫•t c·∫£ features
features = ['Weekly_Sales', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment', 'Holiday_Flag']
correlation_matrix = df[features].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, square=True)
plt.title('üî• CORRELATION MATRIX - T·∫§T C·∫¢ ƒê·∫∂C TR∆ØNG', fontsize=16, fontweight='bold')
plt.tight_layout()
plt.savefig('correlation_matrix_all_features.png', dpi=300, bbox_inches='tight')
plt.show()

# In ra correlation v·ªõi Weekly_Sales
print("\nüìä CORRELATION V·ªöI DOANH THU:")
sales_corr = correlation_matrix['Weekly_Sales'].sort_values(ascending=False)
for feature, corr in sales_corr.items():
    if feature != 'Weekly_Sales':
        print(f"   {feature}: {corr:.4f}")

# ========== 8. PH√ÇN T√çCH THEO TH·ªúI GIAN ==========
print("\n8. PH√ÇN T√çCH DOANH THU THEO TH·ªúI GIAN")
print("-" * 40)

fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('‚è∞ PH√ÇN T√çCH DOANH THU THEO TH·ªúI GIAN', fontsize=16, fontweight='bold')

# 8.1 Doanh thu theo th√°ng
monthly_sales = df.groupby('Month')['Weekly_Sales'].mean().reset_index()
axes[0, 0].bar(monthly_sales['Month'], monthly_sales['Weekly_Sales'], alpha=0.7)
axes[0, 0].set_xlabel('Th√°ng')
axes[0, 0].set_ylabel('Doanh thu trung b√¨nh ($)')
axes[0, 0].set_title('Doanh thu trung b√¨nh theo th√°ng')
axes[0, 0].set_xticks(range(1, 13))

# 8.2 Doanh thu theo tu·∫ßn trong nƒÉm
week_sales = df.groupby('WeekOfYear')['Weekly_Sales'].mean().reset_index()
axes[0, 1].plot(week_sales['WeekOfYear'], week_sales['Weekly_Sales'], 'b-', linewidth=2)
axes[0, 1].set_xlabel('Tu·∫ßn trong nƒÉm')
axes[0, 1].set_ylabel('Doanh thu trung b√¨nh ($)')
axes[0, 1].set_title('Doanh thu trung b√¨nh theo tu·∫ßn trong nƒÉm')
axes[0, 1].grid(True, alpha=0.3)

# 8.3 Doanh thu theo nƒÉm
year_sales = df.groupby('Year')['Weekly_Sales'].mean().reset_index()
axes[1, 0].bar(year_sales['Year'], year_sales['Weekly_Sales'], alpha=0.7)
axes[1, 0].set_xlabel('NƒÉm')
axes[1, 0].set_ylabel('Doanh thu trung b√¨nh ($)')
axes[1, 0].set_title('Doanh thu trung b√¨nh theo nƒÉm')

# 8.4 Time series plot cho m·ªôt store
sample_store = df[df['Store'] == 1].sort_values('Date')
axes[1, 1].plot(sample_store['Date'], sample_store['Weekly_Sales'], 'g-', linewidth=1.5)
axes[1, 1].set_xlabel('Th·ªùi gian')
axes[1, 1].set_ylabel('Doanh thu ($)')
axes[1, 1].set_title('Doanh thu theo th·ªùi gian (Store 1)')
axes[1, 1].grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('time_series_analysis.png', dpi=300, bbox_inches='tight')
plt.show()

# ========== 9. B√ÅO C√ÅO T·ªîNG H·ª¢P ==========
print("\n" + "="*60)
print("üìã B√ÅO C√ÅO T·ªîNG H·ª¢P EDA")
print("="*60)

print("\nüéØ INSIGHTS CH√çNH:")
print("1. üìä CORRELATION V·ªöI DOANH THU:")
for feature, corr in sales_corr.items():
    if feature != 'Weekly_Sales':
        strength = "M·∫°nh" if abs(corr) > 0.3 else "Y·∫øu" if abs(corr) < 0.1 else "Trung b√¨nh"
        direction = "Thu·∫≠n" if corr > 0 else "Ngh·ªãch"
        print(f"   ‚Ä¢ {feature}: {corr:.4f} ({strength}, {direction})")

print("\n2. üéâ T√ÅC ƒê·ªòNG NG√ÄY L·ªÑ:")
print(f"   ‚Ä¢ Doanh thu ng√†y l·ªÖ cao h∆°n: {((holiday_sales.mean() - non_holiday_sales.mean()) / non_holiday_sales.mean() * 100):.2f}%")

print("\n3. üå°Ô∏è T√ÅC ƒê·ªòNG NHI·ªÜT ƒê·ªò:")
print(f"   ‚Ä¢ Correlation: {temp_correlation:.4f}")
print(f"   ‚Ä¢ Nhi·ªát ƒë·ªô ·∫£nh h∆∞·ªüng {'m·∫°nh' if abs(temp_correlation) > 0.3 else 'y·∫øu'} ƒë·∫øn doanh thu")

print("\n4. ‚õΩ T√ÅC ƒê·ªòNG GI√Å NHI√äN LI·ªÜU:")
print(f"   ‚Ä¢ Correlation: {fuel_correlation:.4f}")
print(f"   ‚Ä¢ Gi√° nhi√™n li·ªáu ·∫£nh h∆∞·ªüng {'m·∫°nh' if abs(fuel_correlation) > 0.3 else 'y·∫øu'} ƒë·∫øn doanh thu")

print("\n5. üí∞ T√ÅC ƒê·ªòNG CPI:")
print(f"   ‚Ä¢ Correlation: {cpi_correlation:.4f}")
print(f"   ‚Ä¢ CPI ·∫£nh h∆∞·ªüng {'m·∫°nh' if abs(cpi_correlation) > 0.3 else 'y·∫øu'} ƒë·∫øn doanh thu")

print("\n6. üë• T√ÅC ƒê·ªòNG TH·∫§T NGHI·ªÜP:")
print(f"   ‚Ä¢ Correlation: {unemp_correlation:.4f}")
print(f"   ‚Ä¢ T·ª∑ l·ªá th·∫•t nghi·ªáp ·∫£nh h∆∞·ªüng {'m·∫°nh' if abs(unemp_correlation) > 0.3 else 'y·∫øu'} ƒë·∫øn doanh thu")

print("\n‚úÖ K·∫æT LU·∫¨N:")
print("‚Ä¢ D·ªØ li·ªáu c√≥ t√≠nh chu k·ª≥ r√µ r·ªát")
print("‚Ä¢ Ng√†y l·ªÖ c√≥ t√°c ƒë·ªông t√≠ch c·ª±c m·∫°nh ƒë·∫øn doanh thu")
print("‚Ä¢ C√°c y·∫øu t·ªë kinh t·∫ø (CPI, Unemployment) c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn doanh thu")
print("‚Ä¢ Nhi·ªát ƒë·ªô v√† gi√° nhi√™n li·ªáu c√≥ t∆∞∆°ng quan v·ªõi doanh thu")

print("\nüìÅ C√ÅC FILE BI·ªÇU ƒê·ªí ƒê√É T·∫†O:")
print("‚Ä¢ temperature_analysis.png")
print("‚Ä¢ fuel_price_analysis.png") 
print("‚Ä¢ holiday_analysis.png")
print("‚Ä¢ cpi_analysis.png")
print("‚Ä¢ unemployment_analysis.png")
print("‚Ä¢ correlation_matrix_all_features.png")
print("‚Ä¢ time_series_analysis.png")

print("\nüéØ G·ª¢I √ù CHO M√î H√åNH:")
print("‚Ä¢ S·ª≠ d·ª•ng Holiday_Flag l√†m feature quan tr·ªçng")
print("‚Ä¢ Xem x√©t t∆∞∆°ng t√°c gi·ªØa Temperature v√† Holiday_Flag")
print("‚Ä¢ Th√™m features th·ªùi gian (Month, WeekOfYear)")
print("‚Ä¢ X·ª≠ l√Ω outliers trong Weekly_Sales")
print("‚Ä¢ C√¢n nh·∫Øc log transformation cho Weekly_Sales")
