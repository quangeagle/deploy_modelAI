import pandas as pd
import numpy as np
import joblib
import os
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

class WalmartPredictionAPI:
    def __init__(self):
        """Kh·ªüi t·∫°o API v√† load model ƒë√£ train"""
        self.model = None
        self.feature_columns = None
        self.model_info = None
        self.is_model_loaded = False
        
        # Load model
        self.load_model()
    
    def load_model(self):
        """Load model ƒë√£ train t·ª´ output_relative"""
        try:
            model_path = 'output_relative/xgb_model.pkl'
            feature_path = 'output_relative/feature_columns.txt'
            info_path = 'output_relative/model_info.txt'
            
            if not os.path.exists(model_path):
                print("‚ùå Kh√¥ng t√¨m th·∫•y model. Vui l√≤ng ch·∫°y xgboost_stacking_relative_changes.py tr∆∞·ªõc.")
                return False
            
            # Load model
            self.model = joblib.load(model_path)
            print("‚úÖ ƒê√£ load XGBoost model th√†nh c√¥ng!")
            
            # Load feature columns
            with open(feature_path, 'r') as f:
                self.feature_columns = [line.strip() for line in f.readlines()]
            print(f"‚úÖ ƒê√£ load {len(self.feature_columns)} features")
            
            # Load model info
            if os.path.exists(info_path):
                with open(info_path, 'r', encoding='utf-8') as f:
                    self.model_info = f.read()
                print("‚úÖ ƒê√£ load th√¥ng tin model")
            
            self.is_model_loaded = True
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi load model: {e}")
            return False
    
    def prepare_input_data(self, weekly_sales_data, external_factors_current, external_factors_previous=None):
        """
        Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o cho prediction
        
        Args:
            weekly_sales_data: List 10 tu·∫ßn doanh thu [week1, week2, ..., week10]
            external_factors_current: Dict c√°c y·∫øu t·ªë b√™n ngo√†i tu·∫ßn d·ª± ƒëo√°n
            external_factors_previous: Dict c√°c y·∫øu t·ªë b√™n ngo√†i tu·∫ßn tr∆∞·ªõc (ƒë·ªÉ t√≠nh relative changes)
        """
        try:
            # T·∫°o DataFrame v·ªõi 10 tu·∫ßn doanh thu
            df = pd.DataFrame({
                'Weekly_Sales': weekly_sales_data,
                'WeekOfYear': list(range(1, 11)),
                'Year': [2024] * 10,
                'Month': [1] * 10,  # C√≥ th·ªÉ c·∫≠p nh·∫≠t sau
                'DayOfWeek': [1] * 10  # Th·ª© 2
            })
            
            # T√≠nh relative changes cho doanh thu
            df['sales_pct_change'] = df['Weekly_Sales'].pct_change().fillna(0)
            df['sales_pct_change_2'] = df['Weekly_Sales'].pct_change(2).fillna(0)
            df['sales_pct_change_3'] = df['Weekly_Sales'].pct_change(3).fillna(0)
            
            # T√≠nh moving averages
            df['sales_ma_3'] = df['Weekly_Sales'].rolling(3).mean().fillna(df['Weekly_Sales'])
            df['sales_ma_5'] = df['Weekly_Sales'].rolling(5).mean().fillna(df['Weekly_Sales'])
            
            # T√≠nh trend
            df['sales_trend'] = df['Weekly_Sales'].diff().fillna(0)
            
            # T·∫°o features cho tu·∫ßn d·ª± ƒëo√°n (tu·∫ßn 11)
            prediction_features = {}
            
            # Doanh thu features
            prediction_features['sales_pct_change'] = df['sales_pct_change'].iloc[-1]
            prediction_features['sales_pct_change_2'] = df['sales_pct_change_2'].iloc[-1]
            prediction_features['sales_pct_change_3'] = df['sales_pct_change_3'].iloc[-1]
            prediction_features['sales_ma_3'] = df['sales_ma_3'].iloc[-1]
            prediction_features['sales_ma_5'] = df['sales_ma_5'].iloc[-1]
            prediction_features['sales_trend'] = df['sales_trend'].iloc[-1]
            
            # External factors (relative changes so v·ªõi tu·∫ßn tr∆∞·ªõc)
            if external_factors_previous is None:
                # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu tu·∫ßn tr∆∞·ªõc, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
                print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu tu·∫ßn tr∆∞·ªõc, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh")
                external_factors_previous = {
                    'Temperature': 25,  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
                    'Fuel_Price': 3.5,
                    'CPI': 250,
                    'Unemployment': 5.0
                }
            
            # T√≠nh relative changes th·ª±c t·∫ø
            for factor in ['Temperature', 'Fuel_Price', 'CPI', 'Unemployment']:
                if factor in external_factors_current and factor in external_factors_previous:
                    current_value = external_factors_current[factor]
                    previous_value = external_factors_previous[factor]
                    
                    # T√≠nh % thay ƒë·ªïi
                    if previous_value != 0:
                        pct_change = (current_value - previous_value) / previous_value
                    else:
                        pct_change = 0  # Tr√°nh chia cho 0
                    
                    # L∆∞u % thay ƒë·ªïi (ƒë√¢y l√† feature ch√≠nh cho model Relative Changes)
                    prediction_features[f'{factor}_change'] = pct_change * 100  # Chuy·ªÉn th√†nh %
                    
                    # L∆∞u gi√° tr·ªã tuy·ªát ƒë·ªëi hi·ªán t·∫°i
                    prediction_features[f'{factor}'] = current_value
                else:
                    # N·∫øu thi·∫øu d·ªØ li·ªáu, ƒë·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh
                    prediction_features[f'{factor}_change'] = 0
                    prediction_features[f'{factor}'] = external_factors_previous.get(factor, 0)
            
            # Holiday flag
            prediction_features['Holiday_Flag'] = external_factors_current.get('Holiday_Flag', 0)
            
            # Time features
            prediction_features['WeekOfYear'] = 11
            prediction_features['Month'] = 1
            prediction_features['Year'] = 2024
            prediction_features['DayOfWeek'] = 1
            prediction_features['Is_Weekend'] = 0
            
            # T·∫°o DataFrame features
            features_df = pd.DataFrame([prediction_features])
            
            # ƒê·∫£m b·∫£o c√≥ ƒë·ªß columns nh∆∞ model ƒë√£ train
            missing_cols = set(self.feature_columns) - set(features_df.columns)
            for col in missing_cols:
                features_df[col] = 0
            
            # S·∫Øp x·∫øp columns theo th·ª© t·ª± model ƒë√£ train
            features_df = features_df[self.feature_columns]
            
            return features_df, df
            
        except Exception as e:
            print(f"‚ùå L·ªói khi chu·∫©n b·ªã d·ªØ li·ªáu: {e}")
            return None, None
    
    def predict_gru_sales(self, weekly_sales_data):
        """
        D·ª± ƒëo√°n doanh thu tu·∫ßn ti·∫øp theo d·ª±a tr√™n GRU (ƒë∆°n gi·∫£n h√≥a)
        Trong th·ª±c t·∫ø, b·∫°n s·∫Ω load GRU model ƒë√£ train
        """
        try:
            # ƒê∆°n gi·∫£n h√≥a: d·ª±a tr√™n trend v√† moving average
            recent_sales = weekly_sales_data[-3:]  # 3 tu·∫ßn g·∫ßn nh·∫•t
            trend = np.mean(np.diff(recent_sales))
            ma_3 = np.mean(recent_sales)
            
            # D·ª± ƒëo√°n d·ª±a tr√™n trend v√† moving average
            gru_prediction = ma_3 + trend
            
            # ƒê·∫£m b·∫£o d·ª± ƒëo√°n kh√¥ng √¢m
            gru_prediction = max(gru_prediction, np.min(recent_sales) * 0.8)
            
            return gru_prediction
            
        except Exception as e:
            print(f"‚ùå L·ªói khi d·ª± ƒëo√°n GRU: {e}")
            return None
    
    def predict_xgboost_adjustment(self, features_df):
        """
        D·ª± ƒëo√°n ƒëi·ªÅu ch·ªânh t·ª´ XGBoost d·ª±a tr√™n external factors
        """
        try:
            if not self.is_model_loaded:
                print("‚ùå Model ch∆∞a ƒë∆∞·ª£c load")
                return None
            
            # D·ª± ƒëo√°n
            xgb_prediction = self.model.predict(features_df)[0]
            
            return xgb_prediction
            
        except Exception as e:
            print(f"‚ùå L·ªói khi d·ª± ƒëo√°n XGBoost: {e}")
            return None
    
    def analyze_external_factors(self, features_df, external_factors):
        """
        Ph√¢n t√≠ch t√°c ƒë·ªông c·ªßa c√°c y·∫øu t·ªë b√™n ngo√†i
        """
        try:
            print(f"üîç Debug: external_factors keys: {list(external_factors.keys())}")
            print(f"üîç Debug: external_factors values: {external_factors}")
            analysis = {}
            
            # Ph√¢n t√≠ch t·ª´ng factor
            for factor in ['Temperature', 'Fuel_Price', 'CPI', 'Unemployment']:
                try:
                    if f'{factor}_change' in features_df.columns:
                        pct_change = features_df[f'{factor}_change'].iloc[0] / 100  # Chuy·ªÉn t·ª´ % v·ªÅ decimal
                        # L·∫•y gi√° tr·ªã tuy·ªát ƒë·ªëi t·ª´ external_factors, kh√¥ng ph·∫£i t·ª´ features_df
                        # external_factors c√≥ keys: 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment', 'Holiday_Flag'
                        absolute_value = external_factors.get(factor, 0)
                        print(f"üîç Debug {factor}: absolute_value={absolute_value}, pct_change={pct_change}")
                        
                        # ƒê√°nh gi√° t√°c ƒë·ªông
                        if factor == 'Temperature':
                            if pct_change > 0.1:  # TƒÉng >10%
                                impact = "Nhi·ªát ƒë·ªô tƒÉng cao ‚Üí c√≥ th·ªÉ gi·∫£m doanh thu (ng∆∞·ªùi √≠t ra ngo√†i)"
                                direction = "Gi·∫£m"
                            elif pct_change < -0.1:  # Gi·∫£m >10%
                                impact = "Nhi·ªát ƒë·ªô gi·∫£m ‚Üí c√≥ th·ªÉ tƒÉng doanh thu (mua s·∫Øm m√πa ƒë√¥ng)"
                                direction = "TƒÉng"
                            else:
                                impact = "Nhi·ªát ƒë·ªô ·ªïn ƒë·ªãnh ‚Üí √≠t ·∫£nh h∆∞·ªüng"
                                direction = "Trung t√≠nh"
                        
                        elif factor == 'Fuel_Price':
                            if pct_change > 0.05:  # TƒÉng >5%
                                impact = "Gi√° xƒÉng tƒÉng ‚Üí gi·∫£m s·ª©c mua ‚Üí gi·∫£m doanh thu"
                                direction = "Gi·∫£m"
                            elif pct_change < -0.05:  # Gi·∫£m >5%
                                impact = "Gi√° xƒÉng gi·∫£m ‚Üí tƒÉng s·ª©c mua ‚Üí tƒÉng doanh thu"
                                direction = "TƒÉng"
                            else:
                                impact = "Gi√° xƒÉng ·ªïn ƒë·ªãnh ‚Üí √≠t ·∫£nh h∆∞·ªüng"
                                direction = "Trung t√≠nh"
                        
                        elif factor == 'CPI':
                            if pct_change > 0.02:  # TƒÉng >2%
                                impact = "CPI tƒÉng ‚Üí l·∫°m ph√°t ‚Üí gi·∫£m s·ª©c mua ‚Üí gi·∫£m doanh thu"
                                direction = "Gi·∫£m"
                            elif pct_change < -0.02:  # Gi·∫£m >2%
                                impact = "CPI gi·∫£m ‚Üí gi·∫£m l·∫°m ph√°t ‚Üí tƒÉng s·ª©c mua ‚Üí tƒÉng doanh thu"
                                direction = "TƒÉng"
                            else:
                                impact = "CPI ·ªïn ƒë·ªãnh ‚Üí √≠t ·∫£nh h∆∞·ªüng"
                                direction = "Trung t√≠nh"
                        
                        elif factor == 'Unemployment':
                            if pct_change > 0.01:  # TƒÉng >1%
                                impact = "T·ª∑ l·ªá th·∫•t nghi·ªáp tƒÉng ‚Üí gi·∫£m s·ª©c mua ‚Üí gi·∫£m doanh thu"
                                direction = "Gi·∫£m"
                            elif pct_change < -0.01:  # Gi·∫£m >1%
                                impact = "T·ª∑ l·ªá th·∫•t nghi·ªáp gi·∫£m ‚Üí tƒÉng s·ª©c mua ‚Üí tƒÉng doanh thu"
                                direction = "TƒÉng"
                            else:
                                impact = "T·ª∑ l·ªá th·∫•t nghi·ªáp ·ªïn ƒë·ªãnh ‚Üí √≠t ·∫£nh h∆∞·ªüng"
                                direction = "Trung t√≠nh"
                        
                        analysis[factor] = {
                            'value': absolute_value,
                            'pct_change': pct_change,
                            'impact': impact,
                            'direction': direction
                        }
                    else:
                        # N·∫øu kh√¥ng c√≥ data, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
                        analysis[factor] = {
                            'value': 0,
                            'pct_change': 0,
                            'impact': 'Kh√¥ng c√≥ d·ªØ li·ªáu',
                            'direction': 'Trung t√≠nh'
                        }
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi ph√¢n t√≠ch {factor}: {e}")
                    # S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
                    analysis[factor] = {
                        'value': 0,
                        'pct_change': 0,
                        'impact': f'L·ªói ph√¢n t√≠ch: {str(e)}',
                        'direction': 'Trung t√≠nh'
                    }
            
            # Holiday flag
            if 'Holiday_Flag' in external_factors:
                holiday = external_factors['Holiday_Flag']
                if holiday == 1:
                    analysis['Holiday'] = {
                        'value': 'C√≥',
                        'impact': 'Ng√†y l·ªÖ ‚Üí tƒÉng doanh thu do nhu c·∫ßu mua s·∫Øm cao',
                        'direction': 'TƒÉng'
                    }
                else:
                    analysis['Holiday'] = {
                        'value': 'Kh√¥ng',
                        'impact': 'Ng√†y th∆∞·ªùng ‚Üí doanh thu b√¨nh th∆∞·ªùng',
                        'direction': 'Trung t√≠nh'
                    }
            else:
                # ƒê·∫£m b·∫£o lu√¥n c√≥ Holiday factor
                analysis['Holiday'] = {
                    'value': 'Kh√¥ng',
                    'impact': 'Ng√†y th∆∞·ªùng ‚Üí doanh thu b√¨nh th∆∞·ªùng',
                    'direction': 'Trung t√≠nh'
                }
            
            # ƒê·∫£m b·∫£o t·∫•t c·∫£ factors ƒë·ªÅu c√≥ m·∫∑t
            required_factors = ['Temperature', 'Fuel_Price', 'CPI', 'Unemployment', 'Holiday']
            for factor in required_factors:
                if factor not in analysis:
                    analysis[factor] = {
                        'value': 0,
                        'pct_change': 0,
                        'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch',
                        'direction': 'Trung t√≠nh'
                    }
            
            return analysis
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ph√¢n t√≠ch external factors: {e}")
            # Tr·∫£ v·ªÅ dictionary m·∫∑c ƒë·ªãnh thay v√¨ None
            return {
                'Temperature': {'value': 0, 'pct_change': 0, 'impact': 'L·ªói ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                'Fuel_Price': {'value': 0, 'pct_change': 0, 'impact': 'L·ªói ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                'CPI': {'value': 0, 'pct_change': 0, 'impact': 'L·ªói ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                'Unemployment': {'value': 0, 'pct_change': 0, 'impact': 'L·ªói ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                'Holiday': {'value': 'Kh√¥ng', 'impact': 'L·ªói ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'}
            }
    
    def make_prediction(self, weekly_sales_data, external_factors_current, external_factors_previous=None):
        """
        Th·ª±c hi·ªán d·ª± ƒëo√°n ho√†n ch·ªânh
        
        Args:
            weekly_sales_data: List 10 tu·∫ßn doanh thu qu√° kh·ª©
            external_factors_current: Dict c√°c y·∫øu t·ªë b√™n ngo√†i tu·∫ßn d·ª± ƒëo√°n
            external_factors_previous: Dict c√°c y·∫øu t·ªë b√™n ngo√†i tu·∫ßn tr∆∞·ªõc (ƒë·ªÉ t√≠nh relative changes)
        """
        try:
            print("\nüîÆ ƒêANG TH·ª∞C HI·ªÜN D·ª∞ ƒêO√ÅN...")
            print("=" * 50)
            
            # 1. Chu·∫©n b·ªã d·ªØ li·ªáu
            print("üìä Chu·∫©n b·ªã d·ªØ li·ªáu...")
            features_df, historical_df = self.prepare_input_data(weekly_sales_data, external_factors_current, external_factors_previous)
            if features_df is None:
                return None
            
            # 2. D·ª± ƒëo√°n GRU
            print("üß† D·ª± ƒëo√°n GRU d·ª±a tr√™n doanh thu c√°c tu·∫ßn tr∆∞·ªõc...")
            gru_prediction = self.predict_gru_sales(weekly_sales_data)
            if gru_prediction is None:
                return None
            
            print(f"‚úÖ GRU Prediction: ${gru_prediction:,.2f}")
            
            # 3. D·ª± ƒëo√°n XGBoost adjustment
            print("üå≥ D·ª± ƒëo√°n ƒëi·ªÅu ch·ªânh t·ª´ XGBoost...")
            xgb_adjustment = self.predict_xgboost_adjustment(features_df)
            if xgb_adjustment is None:
                return None
            
            print(f"‚úÖ XGBoost Adjustment: ${xgb_adjustment:,.2f}")
            
            # 4. T√≠nh final prediction (80% GRU + 20% XGBoost)
            final_prediction = 0.8 * gru_prediction + 0.2 * xgb_adjustment
            
            # 5. Ph√¢n t√≠ch external factors
            print("üîç Ph√¢n t√≠ch t√°c ƒë·ªông external factors...")
            factor_analysis = self.analyze_external_factors(features_df, external_factors_current)
            
            # ƒê·∫£m b·∫£o factor_analysis kh√¥ng bao gi·ªù l√† None
            if factor_analysis is None:
                factor_analysis = {
                    'Temperature': {'value': 0, 'pct_change': 0, 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                    'Fuel_Price': {'value': 0, 'pct_change': 0, 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                    'CPI': {'value': 0, 'pct_change': 0, 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                    'Unemployment': {'value': 0, 'pct_change': 0, 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                    'Holiday': {'value': 'Kh√¥ng', 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'}
                }
            
            # 6. T·ªïng h·ª£p k·∫øt qu·∫£
            result = {
                'gru_prediction': gru_prediction,
                'xgb_adjustment': xgb_adjustment,
                'final_prediction': final_prediction,
                'factor_analysis': factor_analysis,
                'features_used': list(features_df.columns),
                'historical_data': historical_df
            }
            
            return result
            
        except Exception as e:
            print(f"‚ùå L·ªói khi th·ª±c hi·ªán d·ª± ƒëo√°n: {e}")
            return None
    
    def print_prediction_result(self, result):
        """
        In k·∫øt qu·∫£ d·ª± ƒëo√°n m·ªôt c√°ch ƒë·∫πp m·∫Øt
        """
        if result is None:
            return
        
        print("\n" + "=" * 60)
        print("üéØ K·∫æT QU·∫¢ D·ª∞ ƒêO√ÅN DOANH THU WALMART")
        print("=" * 60)
        
        # Th√¥ng tin d·ª± ƒëo√°n
        print(f"\nüìà D·ª∞ ƒêO√ÅN:")
        print(f"   ‚Ä¢ GRU Prediction:     ${result['gru_prediction']:>12,.2f}")
        print(f"   ‚Ä¢ XGBoost Adjustment: ${result['xgb_adjustment']:>12,.2f}")
        print(f"   ‚Ä¢ Final Prediction:   ${result['final_prediction']:>12,.2f}")
        
        # Ph√¢n t√≠ch factors
        print(f"\nüîç PH√ÇN T√çCH T√ÅC ƒê·ªòNG:")
        for factor, info in result['factor_analysis'].items():
            if factor == 'Holiday':
                print(f"   ‚Ä¢ {factor}: {info['value']}")
                print(f"     ‚Üí {info['impact']}")
            else:
                print(f"   ‚Ä¢ {factor}: {info['value']:.2f} ({info['pct_change']:+.1%})")
                print(f"     ‚Üí {info['impact']}")
        
        # Gi·∫£i th√≠ch c·ªông tr·ª´
        print(f"\nüí° GI·∫¢I TH√çCH:")
        adjustment = result['xgb_adjustment'] - result['gru_prediction']
        if adjustment > 0:
            print(f"   XGBoost ƒëi·ªÅu ch·ªânh TƒÇNG doanh thu GRU: +${adjustment:,.2f}")
            print(f"   L√Ω do: C√°c y·∫øu t·ªë b√™n ngo√†i c√≥ l·ª£i cho doanh thu")
        else:
            print(f"   XGBoost ƒëi·ªÅu ch·ªânh GI·∫¢M doanh thu GRU: {adjustment:,.2f}")
            print(f"   L√Ω do: C√°c y·∫øu t·ªë b√™n ngo√†i b·∫•t l·ª£i cho doanh thu")
        
        print(f"\nüìä T·ªà L·ªÜ ENSEMBLE: 80% GRU + 20% XGBoost")
        print("=" * 60)
    
    def run_prediction_demo(self):
        """
        Ch·∫°y demo d·ª± ƒëo√°n v·ªõi d·ªØ li·ªáu m·∫´u
        """
        print("\nüéØ DEMO D·ª∞ ƒêO√ÅN DOANH THU WALMART")
        print("=" * 50)
        
        # D·ªØ li·ªáu m·∫´u - 10 tu·∫ßn doanh thu
        sample_sales = [
            100000, 105000, 98000, 112000, 108000,
            115000, 102000, 118000, 125000, 120000
        ]
        
        print(f"üìä D·ªØ li·ªáu doanh thu 10 tu·∫ßn g·∫ßn nh·∫•t:")
        for i, sales in enumerate(sample_sales, 1):
            print(f"   Tu·∫ßn {i:2d}: ${sales:>8,}")
        
        # External factors cho tu·∫ßn TR∆Ø·ªöC (tu·∫ßn 10)
        sample_factors_previous = {
            'Temperature': 25,      # Nhi·ªát ƒë·ªô tu·∫ßn tr∆∞·ªõc
            'Fuel_Price': 3.5,     # Gi√° xƒÉng tu·∫ßn tr∆∞·ªõc
            'CPI': 250,            # CPI tu·∫ßn tr∆∞·ªõc
            'Unemployment': 5.0,   # Th·∫•t nghi·ªáp tu·∫ßn tr∆∞·ªõc
            'Holiday_Flag': 0      # Kh√¥ng ph·∫£i ng√†y l·ªÖ
        }
        
        # External factors cho tu·∫ßn HI·ªÜN T·∫†I (tu·∫ßn 11 - c·∫ßn d·ª± ƒëo√°n)
        sample_factors_current = {
            'Temperature': 28,      # Nhi·ªát ƒë·ªô tƒÉng
            'Fuel_Price': 3.8,     # Gi√° xƒÉng tƒÉng
            'CPI': 255,            # CPI tƒÉng
            'Unemployment': 5.2,   # Th·∫•t nghi·ªáp tƒÉng
            'Holiday_Flag': 0      # Kh√¥ng ph·∫£i ng√†y l·ªÖ
        }
        
        print(f"\nüåç External factors tu·∫ßn TR∆Ø·ªöC (tu·∫ßn 10):")
        for factor, value in sample_factors_previous.items():
            if factor == 'Holiday_Flag':
                print(f"   {factor}: {'C√≥' if value == 1 else 'Kh√¥ng'}")
            else:
                print(f"   {factor}: {value}")
        
        print(f"\nüåç External factors tu·∫ßn HI·ªÜN T·∫†I (tu·∫ßn 11):")
        for factor, value in sample_factors_current.items():
            if factor == 'Holiday_Flag':
                print(f"   {factor}: {'C√≥' if value == 1 else 'Kh√¥ng'}")
            else:
                print(f"   {factor}: {value}")
        
        # T√≠nh % thay ƒë·ªïi ƒë·ªÉ demo
        print(f"\nüìä % Thay ƒë·ªïi so v·ªõi tu·∫ßn tr∆∞·ªõc:")
        for factor in ['Temperature', 'Fuel_Price', 'CPI', 'Unemployment']:
            prev_val = sample_factors_previous[factor]
            curr_val = sample_factors_current[factor]
            if prev_val != 0:
                pct_change = (curr_val - prev_val) / prev_val * 100
                print(f"   {factor}: {pct_change:+.1f}% ({prev_val} ‚Üí {curr_val})")
        
        # Th·ª±c hi·ªán d·ª± ƒëo√°n
        result = self.make_prediction(sample_sales, sample_factors_current, sample_factors_previous)
        
        # In k·∫øt qu·∫£
        self.print_prediction_result(result)
        
        return result
    
    def interactive_prediction(self):
        """
        Cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p d·ªØ li·ªáu t∆∞∆°ng t√°c
        """
        print("\nüéØ D·ª∞ ƒêO√ÅN T∆Ø∆†NG T√ÅC")
        print("=" * 50)
        
        try:
            # Nh·∫≠p doanh thu 10 tu·∫ßn
            print("üìä Nh·∫≠p doanh thu 10 tu·∫ßn g·∫ßn nh·∫•t (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y):")
            print("V√≠ d·ª•: 100000, 105000, 98000, 112000, 108000, 115000, 102000, 118000, 125000, 120000")
            
            sales_input = input("üëâ Doanh thu 10 tu·∫ßn: ").strip()
            weekly_sales = [float(x.strip()) for x in sales_input.split(',')]
            
            if len(weekly_sales) != 10:
                print("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng 10 tu·∫ßn!")
                return None
            
            print(f"‚úÖ ƒê√£ nh·∫≠p {len(weekly_sales)} tu·∫ßn doanh thu")
            
            # Nh·∫≠p external factors tu·∫ßn TR∆Ø·ªöC
            print(f"\nüåç Nh·∫≠p external factors tu·∫ßn TR∆Ø·ªöC (tu·∫ßn 10):")
            
            temp_prev = float(input("üëâ Nhi·ªát ƒë·ªô tu·∫ßn tr∆∞·ªõc (¬∞C): "))
            fuel_prev = float(input("üëâ Gi√° xƒÉng tu·∫ßn tr∆∞·ªõc ($/gallon): "))
            cpi_prev = float(input("üëâ CPI tu·∫ßn tr∆∞·ªõc: "))
            unemp_prev = float(input("üëâ T·ª∑ l·ªá th·∫•t nghi·ªáp tu·∫ßn tr∆∞·ªõc (%): "))
            holiday_prev = int(input("üëâ Ng√†y l·ªÖ tu·∫ßn tr∆∞·ªõc (1=C√≥, 0=Kh√¥ng): "))
            
            external_factors_previous = {
                'Temperature': temp_prev,
                'Fuel_Price': fuel_prev,
                'CPI': cpi_prev,
                'Unemployment': unemp_prev,
                'Holiday_Flag': holiday_prev
            }
            
            print("‚úÖ ƒê√£ nh·∫≠p external factors tu·∫ßn tr∆∞·ªõc")
            
            # Nh·∫≠p external factors tu·∫ßn HI·ªÜN T·∫†I
            print(f"\nüåç Nh·∫≠p external factors tu·∫ßn HI·ªÜN T·∫†I (tu·∫ßn 11 - c·∫ßn d·ª± ƒëo√°n):")
            
            temp_curr = float(input("üëâ Nhi·ªát ƒë·ªô tu·∫ßn n√†y (¬∞C): "))
            fuel_curr = float(input("üëâ Gi√° xƒÉng tu·∫ßn n√†y ($/gallon): "))
            cpi_curr = float(input("üëâ CPI tu·∫ßn n√†y: "))
            unemp_curr = float(input("üëâ T·ª∑ l·ªá th·∫•t nghi·ªáp tu·∫ßn n√†y (%): "))
            holiday_curr = int(input("üëâ Ng√†y l·ªÖ tu·∫ßn n√†y (1=C√≥, 0=Kh√¥ng): "))
            
            external_factors_current = {
                'Temperature': temp_curr,
                'Fuel_Price': fuel_curr,
                'CPI': cpi_curr,
                'Unemployment': unemp_curr,
                'Holiday_Flag': holiday_curr
            }
            
            print("‚úÖ ƒê√£ nh·∫≠p external factors tu·∫ßn hi·ªán t·∫°i")
            
            # Hi·ªÉn th·ªã % thay ƒë·ªïi
            print(f"\nüìä % Thay ƒë·ªïi so v·ªõi tu·∫ßn tr∆∞·ªõc:")
            for factor in ['Temperature', 'Fuel_Price', 'CPI', 'Unemployment']:
                prev_val = external_factors_previous[factor]
                curr_val = external_factors_current[factor]
                if prev_val != 0:
                    pct_change = (curr_val - prev_val) / prev_val * 100
                    print(f"   {factor}: {pct_change:+.1f}% ({prev_val} ‚Üí {curr_val})")
            
            # Th·ª±c hi·ªán d·ª± ƒëo√°n
            result = self.make_prediction(weekly_sales, external_factors_current, external_factors_previous)
            
            # In k·∫øt qu·∫£
            self.print_prediction_result(result)
            
            return result
            
        except ValueError as e:
            print(f"‚ùå L·ªói nh·∫≠p li·ªáu: {e}")
            return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

# ========== FASTAPI INTEGRATION ==========
try:
    from fastapi import FastAPI, HTTPException
    from pydantic import BaseModel
    from typing import List, Dict, Optional
    import uvicorn
    
    # T·∫°o FastAPI app
    app = FastAPI(
        title="Walmart Sales Prediction API",
        description="API d·ª± ƒëo√°n doanh thu Walmart s·ª≠ d·ª•ng GRU + XGBoost Ensemble",
        version="1.0.0"
    )
    
    # Pydantic models cho API
    class WeeklySalesInput(BaseModel):
        """Input cho 10 tu·∫ßn doanh thu qu√° kh·ª©"""
        weekly_sales: List[float]
        description: str = "Doanh thu 10 tu·∫ßn g·∫ßn nh·∫•t (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)"
    
    class ExternalFactorsInput(BaseModel):
        """Input cho external factors tu·∫ßn d·ª± ƒëo√°n"""
        temperature: float
        fuel_price: float
        cpi: float
        unemployment: float
        holiday_flag: int = 0
        description: str = "External factors cho tu·∫ßn d·ª± ƒëo√°n"
    
    class ExternalFactorsPreviousInput(BaseModel):
        """Input cho external factors tu·∫ßn tr∆∞·ªõc (ƒë·ªÉ t√≠nh relative changes)"""
        temperature: float
        fuel_price: float
        cpi: float
        unemployment: float
        holiday_flag: int = 0
        description: str = "External factors tu·∫ßn tr∆∞·ªõc (ƒë·ªÉ t√≠nh % thay ƒë·ªïi)"
    
    class PredictionRequest(BaseModel):
        """Request ho√†n ch·ªânh cho d·ª± ƒëo√°n"""
        weekly_sales: List[float]
        external_factors_current: ExternalFactorsInput
        external_factors_previous: ExternalFactorsPreviousInput
    
    class PredictionResponse(BaseModel):
        """Response d·ª± ƒëo√°n"""
        gru_prediction: float
        xgb_adjustment: float
        final_prediction: float
        factor_analysis: Dict
        explanation: str
        success: bool
        message: str
    
    # Global API instance
    api_instance = None
    
    @app.on_event("startup")
    async def startup_event():
        """Kh·ªüi t·∫°o API khi startup"""
        global api_instance
        api_instance = WalmartPredictionAPI()
        if not api_instance.is_model_loaded:
            raise RuntimeError("Kh√¥ng th·ªÉ load model")
        print("‚úÖ FastAPI ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng!")
    
    @app.get("/")
    async def root():
        """Root endpoint"""
        return {
            "message": "Walmart Sales Prediction API",
            "version": "1.0.0",
            "endpoints": {
                "/": "API info",
                "/health": "Health check",
                "/predict": "D·ª± ƒëo√°n doanh thu",
                "/demo": "Demo v·ªõi d·ªØ li·ªáu m·∫´u"
            }
        }
    
    @app.get("/health")
    async def health_check():
        """Health check endpoint"""
        global api_instance
        if api_instance and api_instance.is_model_loaded:
            return {"status": "healthy", "model_loaded": True}
        else:
            return {"status": "unhealthy", "model_loaded": False}
    
    @app.post("/predict", response_model=PredictionResponse)
    async def predict_sales(request: PredictionRequest):
        """Endpoint d·ª± ƒëo√°n doanh thu"""
        global api_instance
        
        if not api_instance or not api_instance.is_model_loaded:
            raise HTTPException(status_code=500, detail="Model ch∆∞a ƒë∆∞·ª£c load")
        
        try:
            # Validate input
            if len(request.weekly_sales) != 10:
                raise HTTPException(status_code=400, detail="C·∫ßn ƒë√∫ng 10 tu·∫ßn doanh thu")
            
            # Chu·∫©n b·ªã external factors
            external_factors_current = {
                'Temperature': request.external_factors_current.temperature,
                'Fuel_Price': request.external_factors_current.fuel_price,
                'CPI': request.external_factors_current.cpi,
                'Unemployment': request.external_factors_current.unemployment,
                'Holiday_Flag': request.external_factors_current.holiday_flag
            }
            
            # T·∫°o m·ªôt dict ƒë·ªÉ truy·ªÅn cho prepare_input_data
            # ƒê·ªÉ t√≠nh relative changes, ch√∫ng ta c·∫ßn d·ªØ li·ªáu tu·∫ßn tr∆∞·ªõc.
            # V√¨ l√† demo, ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh cho tu·∫ßn tr∆∞·ªõc.
            # Trong th·ª±c t·∫ø, b·∫°n s·∫Ω c·∫ßn l·∫•y d·ªØ li·ªáu tu·∫ßn tr∆∞·ªõc t·ª´ c∆° s·ªü d·ªØ li·ªáu ho·∫∑c API kh√°c.
            external_factors_previous = {
                'Temperature': request.external_factors_previous.temperature,
                'Fuel_Price': request.external_factors_previous.fuel_price,
                'CPI': request.external_factors_previous.cpi,
                'Unemployment': request.external_factors_previous.unemployment,
                'Holiday_Flag': request.external_factors_previous.holiday_flag
            }
            
            # Th·ª±c hi·ªán d·ª± ƒëo√°n
            result = api_instance.make_prediction(request.weekly_sales, external_factors_current, external_factors_previous)
            
            if result is None:
                raise HTTPException(status_code=500, detail="L·ªói khi th·ª±c hi·ªán d·ª± ƒëo√°n")
            
            # ƒê·∫£m b·∫£o factor_analysis lu√¥n h·ª£p l·ªá
            if result.get('factor_analysis') is None:
                result['factor_analysis'] = {
                    'Temperature': {'value': 0, 'pct_change': 0, 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                    'Fuel_Price': {'value': 0, 'pct_change': 0, 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                    'CPI': {'value': 0, 'pct_change': 0, 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                    'Unemployment': {'value': 0, 'pct_change': 0, 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                    'Holiday': {'value': 'Kh√¥ng', 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'}
                }
            
            # T·∫°o explanation
            adjustment = result['xgb_adjustment'] - result['gru_prediction']
            if adjustment > 0:
                explanation = f"XGBoost ƒëi·ªÅu ch·ªânh TƒÇNG doanh thu GRU: +${adjustment:,.2f}. L√Ω do: C√°c y·∫øu t·ªë b√™n ngo√†i c√≥ l·ª£i cho doanh thu."
            else:
                explanation = f"XGBoost ƒëi·ªÅu ch·ªânh GI·∫¢M doanh thu GRU: {adjustment:,.2f}. L√Ω do: C√°c y·∫øu t·ªë b√™n ngo√†i b·∫•t l·ª£i cho doanh thu."
            
            return PredictionResponse(
                gru_prediction=result['gru_prediction'],
                xgb_adjustment=result['xgb_adjustment'],
                final_prediction=result['final_prediction'],
                factor_analysis=result['factor_analysis'],
                explanation=explanation,
                success=True,
                message="D·ª± ƒëo√°n th√†nh c√¥ng"
            )
            
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"L·ªói: {str(e)}")
    
    @app.get("/demo")
    async def demo_prediction():
        """Demo endpoint v·ªõi d·ªØ li·ªáu m·∫´u"""
        global api_instance
        
        if not api_instance or not api_instance.is_model_loaded:
            raise HTTPException(status_code=500, detail="Model ch∆∞a ƒë∆∞·ª£c load")
        
        try:
            # D·ªØ li·ªáu m·∫´u
            sample_sales = [100000, 105000, 98000, 112000, 108000, 115000, 102000, 118000, 125000, 120000]
            sample_factors_current = {
                'Temperature': 28,
                'Fuel_Price': 3.8,
                'CPI': 255,
                'Unemployment': 5.2,
                'Holiday_Flag': 0
            }
            sample_factors_previous = {
                'Temperature': 25,
                'Fuel_Price': 3.5,
                'CPI': 250,
                'Unemployment': 5.0,
                'Holiday_Flag': 0
            }
            
            # Th·ª±c hi·ªán d·ª± ƒëo√°n
            result = api_instance.make_prediction(sample_sales, sample_factors_current, sample_factors_previous)
            
            if result is None:
                raise HTTPException(status_code=500, detail="L·ªói khi th·ª±c hi·ªán demo")
            
            # ƒê·∫£m b·∫£o factor_analysis lu√¥n h·ª£p l·ªá
            if result.get('factor_analysis') is None:
                result['factor_analysis'] = {
                    'Temperature': {'value': 0, 'pct_change': 0, 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                    'Fuel_Price': {'value': 0, 'pct_change': 0, 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                    'CPI': {'value': 0, 'pct_change': 0, 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                    'Unemployment': {'value': 0, 'pct_change': 0, 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'},
                    'Holiday': {'value': 'Kh√¥ng', 'impact': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch', 'direction': 'Trung t√≠nh'}
                }
            
            return {
                "success": True,
                "message": "Demo th√†nh c√¥ng",
                "sample_data": {
                    "weekly_sales": sample_sales,
                    "external_factors_current": sample_factors_current,
                    "external_factors_previous": sample_factors_previous
                },
                "relative_changes": {
                    "Temperature": "+12.0% (25¬∞C ‚Üí 28¬∞C)",
                    "Fuel_Price": "+8.6% ($3.50 ‚Üí $3.80)",
                    "CPI": "+2.0% (250 ‚Üí 255)",
                    "Unemployment": "+4.0% (5.0% ‚Üí 5.2%)"
                },
                "prediction_result": {
                    "gru_prediction": result['gru_prediction'],
                    "xgb_adjustment": result['xgb_adjustment'],
                    "final_prediction": result['final_prediction'],
                    "factor_analysis": result['factor_analysis']
                }
            }
            
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"L·ªói demo: {str(e)}")
    
    @app.get("/model-info")
    async def get_model_info():
        """L·∫•y th√¥ng tin model"""
        global api_instance
        
        if not api_instance or not api_instance.model_info is None:
            return {"model_info": "Kh√¥ng c√≥ th√¥ng tin model"}
        
        return {"model_info": api_instance.model_info}
    
    def run_fastapi():
        """Ch·∫°y FastAPI server"""
        print("üöÄ Kh·ªüi ƒë·ªông FastAPI server...")
        print("üì± API s·∫Ω ch·∫°y t·∫°i: http://localhost:8000")
        print("üìö API docs: http://localhost:8000/docs")
        print("üîç Health check: http://localhost:8000/health")
        print("üéØ D·ª± ƒëo√°n: POST http://localhost:8000/predict")
        print("üéÆ Demo: GET http://localhost:8000/demo")
        print("\nüí° ƒê·ªÉ deploy l√™n host:")
        print("   1. Ch·∫°y: uvicorn walmart_prediction_api:app --host 0.0.0.0 --port 8000")
        print("   2. Ho·∫∑c: python walmart_prediction_api.py --web")
        
        uvicorn.run(app, host="0.0.0.0", port=8000)
    
    # Th√™m option ch·∫°y FastAPI v√†o main menu
    def main_with_fastapi():
        """Main function v·ªõi option FastAPI"""
        print("üè™ WALMART SALES PREDICTION API")
        print("=" * 50)
        print("üéØ Model: Relative Changes Approach")
        print("üìä D·ª± ƒëo√°n ƒëi·ªÅu ch·ªânh doanh thu d·ª±a tr√™n % thay ƒë·ªïi c·ªßa external factors")
        print("üîÑ C·∫ßn d·ªØ li·ªáu: Tu·∫ßn tr∆∞·ªõc + Tu·∫ßn hi·ªán t·∫°i ƒë·ªÉ t√≠nh % thay ƒë·ªïi")
        print("=" * 50)
        
        # Kh·ªüi t·∫°o API
        api = WalmartPredictionAPI()
        
        if not api.is_model_loaded:
            print("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o API. Vui l√≤ng ki·ªÉm tra model.")
            return
        
        while True:
            print("\nüìã MENU L·ª∞A CH·ªåN:")
            print("1. üéØ Demo d·ª± ƒëo√°n (d·ªØ li·ªáu m·∫´u)")
            print("2. üìä D·ª± ƒëo√°n t∆∞∆°ng t√°c (nh·∫≠p d·ªØ li·ªáu)")
            print("3. üìã Th√¥ng tin model")
            print("4. üåê Ch·∫°y FastAPI Web Server")
            print("5. üö™ Tho√°t")
            print("\nüí° L∆∞u √Ω: Model Relative Changes c·∫ßn d·ªØ li·ªáu tu·∫ßn tr∆∞·ªõc ƒë·ªÉ t√≠nh % thay ƒë·ªïi")
            
            choice = input("\nüëâ Nh·∫≠p l·ª±a ch·ªçn (1-5): ").strip()
            
            if choice == '1':
                api.run_prediction_demo()
            elif choice == '2':
                api.interactive_prediction()
            elif choice == '3':
                if api.model_info:
                    print("\nüìã TH√îNG TIN MODEL:")
                    print("=" * 50)
                    print(api.model_info)
                else:
                    print("‚ùå Kh√¥ng c√≥ th√¥ng tin model")
            elif choice == '4':
                print("üåê Kh·ªüi ƒë·ªông FastAPI Web Server...")
                run_fastapi()
                break
            elif choice == '5':
                print("üëã T·∫°m bi·ªát!")
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn 1-5.")
    
    # Thay th·∫ø main function c≈©
    if __name__ == "__main__":
        import sys
        
        # Ki·ªÉm tra argument ƒë·ªÉ ch·∫°y FastAPI
        if len(sys.argv) > 1 and sys.argv[1] == "--web":
            # Ch·∫°y FastAPI tr·ª±c ti·∫øp
            api = WalmartPredictionAPI()
            if api.is_model_loaded:
                run_fastapi()
            else:
                print("‚ùå Kh√¥ng th·ªÉ load model ƒë·ªÉ ch·∫°y FastAPI")
        else:
            # Ch·∫°y CLI v·ªõi option FastAPI
            main_with_fastapi()

except ImportError as e:
    print(f"‚ö†Ô∏è FastAPI kh√¥ng kh·∫£ d·ª•ng: {e}")
    print("üí° ƒê·ªÉ s·ª≠ d·ª•ng FastAPI, c√†i ƒë·∫∑t: pip install fastapi uvicorn")
    print("üîß API v·∫´n ho·∫°t ƒë·ªông ·ªü ch·∫ø ƒë·ªô CLI")
    
    if __name__ == "__main__":
        main_with_fastapi()
