# Feature Interaction Analysis - Ph√¢n t√≠ch t∆∞∆°ng t√°c ƒë·∫∑c tr∆∞ng
# Ki·ªÉm tra v√† ph√¢n t√≠ch c√°c feature interactions ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

# ƒê·ªçc d·ªØ li·ªáu
print("üìä ƒêang ƒë·ªçc d·ªØ li·ªáu Walmart...")
df = pd.read_csv("E:\TrainAI\Train\walmart_processed_by_week.csv")
df['Date'] = pd.to_datetime(df['Date'])

print("="*60)
print("üîç PH√ÇN T√çCH FEATURE INTERACTIONS")
print("="*60)

# ========== 1. T·∫†O FEATURE INTERACTIONS ==========
print("\n1. T·∫†O FEATURE INTERACTIONS")
print("-" * 40)

# 1.1 Holiday √ó Temperature
df['Holiday_Temperature'] = df['Holiday_Flag'] * df['Temperature']

# 1.2 Holiday √ó Month
df['Holiday_Month'] = df['Holiday_Flag'] * df['Month']

# 1.3 Unemployment √ó CPI
df['Unemployment_CPI'] = df['Unemployment'] * df['CPI']

# 1.4 Th√™m m·ªôt s·ªë interactions kh√°c
df['Temperature_Month'] = df['Temperature'] * df['Month']
df['Fuel_Price_CPI'] = df['Fuel_Price'] * df['CPI']

print("‚úÖ ƒê√£ t·∫°o c√°c feature interactions:")
print("   ‚Ä¢ Holiday_Temperature")
print("   ‚Ä¢ Holiday_Month") 
print("   ‚Ä¢ Unemployment_CPI")
print("   ‚Ä¢ Temperature_Month")
print("   ‚Ä¢ Fuel_Price_CPI")

# ========== 2. PH√ÇN T√çCH HOLIDAY √ó TEMPERATURE ==========
print("\n2. PH√ÇN T√çCH HOLIDAY √ó TEMPERATURE")
print("-" * 40)

# T·∫°o figure cho Holiday √ó Temperature analysis
fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('üéâüî• PH√ÇN T√çCH HOLIDAY √ó TEMPERATURE', fontsize=16, fontweight='bold')

# 2.1 Scatter plot: Holiday_Temperature vs Sales
axes[0, 0].scatter(df['Holiday_Temperature'], df['Weekly_Sales'], alpha=0.6, s=20)
axes[0, 0].set_xlabel('Holiday √ó Temperature')
axes[0, 0].set_ylabel('Doanh thu tu·∫ßn ($)')
axes[0, 0].set_title('Holiday √ó Temperature vs Doanh thu')
axes[0, 0].grid(True, alpha=0.3)

# Th√™m trend line
z = np.polyfit(df['Holiday_Temperature'], df['Weekly_Sales'], 1)
p = np.poly1d(z)
axes[0, 0].plot(df['Holiday_Temperature'], p(df['Holiday_Temperature']), "r--", alpha=0.8)

# 2.2 Boxplot: Doanh thu theo nh√≥m Holiday √ó Temperature
df['Holiday_Temp_Category'] = pd.cut(df['Holiday_Temperature'], 
                                     bins=[0, 20, 40, 60, 80, 100], 
                                     labels=['0', '20-40', '40-60', '60-80', '80-100'])

sns.boxplot(data=df, x='Holiday_Temp_Category', y='Weekly_Sales', ax=axes[0, 1])
axes[0, 1].set_title('Doanh thu theo nh√≥m Holiday √ó Temperature')
axes[0, 1].tick_params(axis='x', rotation=45)

# 2.3 Ph√¢n t√≠ch chi ti·∫øt
holiday_temp_stats = df.groupby('Holiday_Flag').agg({
    'Temperature': ['mean', 'std'],
    'Weekly_Sales': ['mean', 'std', 'count']
}).round(2)

print("\nüìä TH·ªêNG K√ä HOLIDAY √ó TEMPERATURE:")
print(holiday_temp_stats)

# 2.4 Correlation analysis
holiday_temp_corr = df['Holiday_Temperature'].corr(df['Weekly_Sales'])
print(f"\nüìä Correlation Holiday √ó Temperature vs Sales: {holiday_temp_corr:.4f}")

# 2.5 Line plot: Holiday_Temperature theo th·ªùi gian
sample_store = df[df['Store'] == 1].sort_values('Date')
axes[1, 0].plot(sample_store['Date'], sample_store['Holiday_Temperature'], 'purple', alpha=0.7)
axes[1, 0].set_xlabel('Th·ªùi gian')
axes[1, 0].set_ylabel('Holiday √ó Temperature')
axes[1, 0].set_title('Holiday √ó Temperature theo th·ªùi gian')

# 2.6 Correlation heatmap
holiday_temp_corr_matrix = df[['Holiday_Temperature', 'Weekly_Sales']].corr()
sns.heatmap(holiday_temp_corr_matrix, annot=True, cmap='coolwarm', center=0, ax=axes[1, 1])
axes[1, 1].set_title('Correlation: Holiday √ó Temperature vs Sales')

plt.tight_layout()
plt.savefig('holiday_temperature_interaction.png', dpi=300, bbox_inches='tight')
plt.show()

# ========== 3. PH√ÇN T√çCH HOLIDAY √ó MONTH ==========
print("\n3. PH√ÇN T√çCH HOLIDAY √ó MONTH")
print("-" * 40)

fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('üéâüìÖ PH√ÇN T√çCH HOLIDAY √ó MONTH', fontsize=16, fontweight='bold')

# 3.1 Scatter plot: Holiday_Month vs Sales
axes[0, 0].scatter(df['Holiday_Month'], df['Weekly_Sales'], alpha=0.6, s=20)
axes[0, 0].set_xlabel('Holiday √ó Month')
axes[0, 0].set_ylabel('Doanh thu tu·∫ßn ($)')
axes[0, 0].set_title('Holiday √ó Month vs Doanh thu')
axes[0, 0].grid(True, alpha=0.3)

# 3.2 Bar plot: Doanh thu trung b√¨nh theo Holiday √ó Month
holiday_month_sales = df.groupby('Holiday_Month')['Weekly_Sales'].mean().reset_index()
axes[0, 1].bar(holiday_month_sales['Holiday_Month'], holiday_month_sales['Weekly_Sales'], alpha=0.7)
axes[0, 1].set_xlabel('Holiday √ó Month')
axes[0, 1].set_ylabel('Doanh thu trung b√¨nh ($)')
axes[0, 1].set_title('Doanh thu trung b√¨nh theo Holiday √ó Month')

# 3.3 Ph√¢n t√≠ch chi ti·∫øt theo th√°ng
holiday_by_month = df[df['Holiday_Flag'] == 1].groupby('Month')['Weekly_Sales'].agg(['mean', 'std', 'count']).round(2)
print("\nüìä DOANH THU NG√ÄY L·ªÑ THEO TH√ÅNG:")
print(holiday_by_month)

# 3.4 Line plot: Holiday_Month theo th·ªùi gian
sample_store = df[df['Store'] == 1].sort_values('Date')
axes[1, 0].plot(sample_store['Date'], sample_store['Holiday_Month'], 'orange', alpha=0.7)
axes[1, 0].set_xlabel('Th·ªùi gian')
axes[1, 0].set_ylabel('Holiday √ó Month')
axes[1, 0].set_title('Holiday √ó Month theo th·ªùi gian')

# 3.5 Correlation heatmap
holiday_month_corr_matrix = df[['Holiday_Month', 'Weekly_Sales']].corr()
sns.heatmap(holiday_month_corr_matrix, annot=True, cmap='coolwarm', center=0, ax=axes[1, 1])
axes[1, 1].set_title('Correlation: Holiday √ó Month vs Sales')

plt.tight_layout()
plt.savefig('holiday_month_interaction.png', dpi=300, bbox_inches='tight')
plt.show()

# Th·ªëng k√™ correlation
holiday_month_corr = df['Holiday_Month'].corr(df['Weekly_Sales'])
print(f"\nüìä Correlation Holiday √ó Month vs Sales: {holiday_month_corr:.4f}")

# ========== 4. PH√ÇN T√çCH UNEMPLOYMENT √ó CPI ==========
print("\n4. PH√ÇN T√çCH UNEMPLOYMENT √ó CPI")
print("-" * 40)

fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('üë•üí∞ PH√ÇN T√çCH UNEMPLOYMENT √ó CPI', fontsize=16, fontweight='bold')

# 4.1 Scatter plot: Unemployment_CPI vs Sales
axes[0, 0].scatter(df['Unemployment_CPI'], df['Weekly_Sales'], alpha=0.6, s=20)
axes[0, 0].set_xlabel('Unemployment √ó CPI')
axes[0, 0].set_ylabel('Doanh thu tu·∫ßn ($)')
axes[0, 0].set_title('Unemployment √ó CPI vs Doanh thu')
axes[0, 0].grid(True, alpha=0.3)

# Th√™m trend line
z = np.polyfit(df['Unemployment_CPI'], df['Weekly_Sales'], 1)
p = np.poly1d(z)
axes[0, 0].plot(df['Unemployment_CPI'], p(df['Unemployment_CPI']), "r--", alpha=0.8)

# 4.2 Boxplot: Doanh thu theo nh√≥m Unemployment_CPI
df['Unemp_CPI_Category'] = pd.cut(df['Unemployment_CPI'], 
                                  bins=[1400, 1500, 1600, 1700, 1800, 1900], 
                                  labels=['1400-1500', '1500-1600', '1600-1700', '1700-1800', '1800-1900'])

sns.boxplot(data=df, x='Unemp_CPI_Category', y='Weekly_Sales', ax=axes[0, 1])
axes[0, 1].set_title('Doanh thu theo nh√≥m Unemployment √ó CPI')
axes[0, 1].tick_params(axis='x', rotation=45)

# 4.3 Ph√¢n t√≠ch chi ti·∫øt
unemp_cpi_stats = df.groupby('Unemp_CPI_Category')['Weekly_Sales'].agg(['mean', 'std', 'count']).round(2)
print("\nüìä TH·ªêNG K√ä UNEMPLOYMENT √ó CPI:")
print(unemp_cpi_stats)

# 4.4 Line plot: Unemployment_CPI theo th·ªùi gian
sample_store = df[df['Store'] == 1].sort_values('Date')
axes[1, 0].plot(sample_store['Date'], sample_store['Unemployment_CPI'], 'green', alpha=0.7)
axes[1, 0].set_xlabel('Th·ªùi gian')
axes[1, 0].set_ylabel('Unemployment √ó CPI')
axes[1, 0].set_title('Unemployment √ó CPI theo th·ªùi gian')

# 4.5 Correlation heatmap
unemp_cpi_corr_matrix = df[['Unemployment_CPI', 'Weekly_Sales']].corr()
sns.heatmap(unemp_cpi_corr_matrix, annot=True, cmap='coolwarm', center=0, ax=axes[1, 1])
axes[1, 1].set_title('Correlation: Unemployment √ó CPI vs Sales')

plt.tight_layout()
plt.savefig('unemployment_cpi_interaction.png', dpi=300, bbox_inches='tight')
plt.show()

# Th·ªëng k√™ correlation
unemp_cpi_corr = df['Unemployment_CPI'].corr(df['Weekly_Sales'])
print(f"\nüìä Correlation Unemployment √ó CPI vs Sales: {unemp_cpi_corr:.4f}")

# ========== 5. SO S√ÅNH CORRELATION T·∫§T C·∫¢ FEATURES ==========
print("\n5. SO S√ÅNH CORRELATION T·∫§T C·∫¢ FEATURES")
print("-" * 40)

# T√≠nh correlation cho t·∫•t c·∫£ features
features = ['Weekly_Sales', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment', 
           'Holiday_Temperature', 'Holiday_Month', 'Unemployment_CPI', 'Temperature_Month', 'Fuel_Price_CPI']

correlation_matrix = df[features].corr()

# In ra correlation v·ªõi Weekly_Sales
print("\nüìä CORRELATION V·ªöI DOANH THU (S·∫Øp x·∫øp theo ƒë·ªô m·∫°nh):")
sales_corr = correlation_matrix['Weekly_Sales'].sort_values(ascending=False)
for feature, corr in sales_corr.items():
    if feature != 'Weekly_Sales':
        strength = "M·∫°nh" if abs(corr) > 0.3 else "Y·∫øu" if abs(corr) < 0.1 else "Trung b√¨nh"
        direction = "Thu·∫≠n" if corr > 0 else "Ngh·ªãch"
        print(f"   ‚Ä¢ {feature}: {corr:.4f} ({strength}, {direction})")

# V·∫Ω correlation matrix
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, square=True, fmt='.3f')
plt.title('üî• CORRELATION MATRIX - T·∫§T C·∫¢ FEATURES & INTERACTIONS', fontsize=16, fontweight='bold')
plt.tight_layout()
plt.savefig('correlation_matrix_with_interactions.png', dpi=300, bbox_inches='tight')
plt.show()

# ========== 6. PH√ÇN T√çCH CHI TI·∫æT THEO LOGIC ==========
print("\n6. PH√ÇN T√çCH CHI TI·∫æT THEO LOGIC")
print("-" * 40)

# 6.1 Holiday √ó Temperature logic
print("\nüéâüî• HOLIDAY √ó TEMPERATURE LOGIC:")
holiday_temp_analysis = df[df['Holiday_Flag'] == 1].groupby(pd.cut(df[df['Holiday_Flag'] == 1]['Temperature'], 
                                                                    bins=[0, 40, 60, 80, 100])).agg({
    'Weekly_Sales': ['mean', 'count']
}).round(2)
print(holiday_temp_analysis)

# 6.2 Holiday √ó Month logic
print("\nüéâüìÖ HOLIDAY √ó MONTH LOGIC:")
holiday_month_analysis = df[df['Holiday_Flag'] == 1].groupby('Month').agg({
    'Weekly_Sales': ['mean', 'count']
}).round(2)
print(holiday_month_analysis)

# 6.3 Unemployment √ó CPI logic
print("\nüë•üí∞ UNEMPLOYMENT √ó CPI LOGIC:")
# T·∫°o categories cho Unemployment v√† CPI
df['Unemp_Category'] = pd.cut(df['Unemployment'], bins=[0, 6, 8, 10, 15], 
                              labels=['Th·∫•p (<6%)', 'Trung b√¨nh (6-8%)', 'Cao (8-10%)', 'R·∫•t cao (>10%)'])
df['CPI_Category'] = pd.cut(df['CPI'], bins=[200, 210, 215, 220, 230], 
                           labels=['Th·∫•p (200-210)', 'Trung b√¨nh (210-215)', 'Cao (215-220)', 'R·∫•t cao (220-230)'])

unemp_cpi_analysis = df.groupby(['Unemp_Category', 'CPI_Category'])['Weekly_Sales'].agg(['mean', 'count']).round(2)
print(unemp_cpi_analysis)

# ========== 7. B√ÅO C√ÅO T·ªîNG H·ª¢P ==========
print("\n" + "="*60)
print("üìã B√ÅO C√ÅO T·ªîNG H·ª¢P FEATURE INTERACTIONS")
print("="*60)

print("\nüéØ K·∫æT QU·∫¢ PH√ÇN T√çCH:")

# T√¨m features c√≥ correlation cao nh·∫•t
top_features = sales_corr.head(6)  # Top 5 features (kh√¥ng t√≠nh Weekly_Sales)
print("\nüèÜ TOP 5 FEATURES C√ì CORRELATION CAO NH·∫§T:")
for i, (feature, corr) in enumerate(top_features.items(), 1):
    print(f"{i}. {feature}: {corr:.4f}")

print("\n‚úÖ K·∫æT LU·∫¨N:")
print("‚Ä¢ D·ªØ li·ªáu c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ t·∫°o c√°c feature interactions")
print("‚Ä¢ Holiday √ó Month c√≥ th·ªÉ l√† interaction quan tr·ªçng nh·∫•t")
print("‚Ä¢ Unemployment √ó CPI c√≥ logic kinh t·∫ø r√µ r√†ng")
print("‚Ä¢ Holiday √ó Temperature c·∫ßn ph√¢n t√≠ch th√™m theo m√πa")

print("\nüìÅ C√ÅC FILE BI·ªÇU ƒê·ªí ƒê√É T·∫†O:")
print("‚Ä¢ holiday_temperature_interaction.png")
print("‚Ä¢ holiday_month_interaction.png")
print("‚Ä¢ unemployment_cpi_interaction.png")
print("‚Ä¢ correlation_matrix_with_interactions.png")

print("\nüéØ G·ª¢I √ù CHO M√î H√åNH:")
print("‚Ä¢ S·ª≠ d·ª•ng Holiday √ó Month l√†m feature ch√≠nh")
print("‚Ä¢ Th√™m Unemployment √ó CPI cho logic kinh t·∫ø")
print("‚Ä¢ Xem x√©t Holiday √ó Temperature cho m√πa v·ª•")
print("‚Ä¢ Test c√°c interactions kh√°c: Temperature √ó Month, Fuel_Price √ó CPI")
